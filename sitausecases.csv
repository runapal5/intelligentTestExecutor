Title, Synopsis
NGI UC for Determine Allocation Availability.docx,"NGI UC for Determine Allocation AvailabilityAVAIL.26ApprovalsAuthor: Document version: Document Date: Revision History
Contents1.	Brief Description	51.1	Background	51.2	Developer Notes	51.2.1	Glossary	51.3	References	62.	Actors	63.	General Preconditions	64.	Basic Flow of Events	74.1	Basic Flow 1 – Determine Allocation Availability for Host Flight Segments	74.1.1	Specific Preconditions	74.1.2	Steps	74.1.3	Specific Post Conditions	85.	Alternate Flows	85.1	Alternate Flow 1 – Request Date Beyond Open For Sell Date	85.1.1	Specific Preconditions	85.1.2	Steps	95.1.3	Specific Post Conditions	96.	Exception Flows	96.1	Exception Flow 1 – No online segments	96.1.1	Specific Preconditions	96.1.2	Steps	96.1.3	Specific Post Conditions	97.	Sub Flows	97.1	Sub Flow 1 – Determine Seat Available (SA) by RBD	9This Sub Flow determines Booking Seat Available (BSA) and Waitlist Seat Available (WSA) for RBD's on a host segment	97.1.1	Specific Preconditions	107.1.2	Steps	107.1.3	Specific Post Conditions	147.2	Sub Flow 2 – Determine Group Seat Available (GSA)	147.2.1	Specific Preconditions	147.2.2	Steps	147.2.3	Specific Post Conditions	168.	General Post Conditions	169.	Extension Points	1610.	Special Requirements	1610.1	Navigation Requirements	1610.2	Usability Requirements	1610.3	New Subscriber Parameter(s)	1610.4	Availability for Host Marketing Free-Sell Code Share (Future)	1810.5	Definition of Protective Cover condition	1910.6	Stop Sale Indicator (SSI) in MICT rules for Tree Top buckets	2011.	Additional Information	2012.	Changes to Reviewed Use Cases	2013.	Future Use Case Considerations	2014.	Assumptions & Issues	2015.	Use Case Elaboration	2115.1	AVAIL.26 – Determine Host Availability (Booking, Groups & Waitlist)	2115.1.1	Summary	2115.1.2	Scope	2115.1.3	Details	2115.1.4	Acceptance Tests	2815.1.5	Non Functional Requirements	3015.1.6	Future Stories	3015.1.7	Determine Availability Example	31Brief DescriptionThis Use Case describes the process to determine Allocation Availability within HIAS environment on host flights.BackgroundAllocation availability is determined by leg or by segment with the minimum seats available value over all allocation controlled legs and segments for each RBD. Financial availability, where applicable, is determined after all of the financial legs have been analysed and the allocation availability calculation is performed. Therefore, during the examination of the legs of a routing, the allocation availability is calculated while the financial availability information is accumulated for calculation at the conclusion.Allocation seat available is first determined based on the Inventory Control Record (ICR) of the host flight segments, which contains information about nesting buckets and booking limits for each RBD. Developer Notes Currently, HIAS caches availability data for every RBD of a flight instance in the FlightAvailability space within the grid. Availability information is maintained at Leg, Segment & POS level. This space is refreshed whenever inventory adjustment and/or ICR change occurs. Going forward, instead of caching both leg and segment availability into this space, we suggest system determines the most restricted availability between the two and cache it, before-hand. This will improve response time and do away with the processing that HIAS currently does when it receives an availability request. The use case flows are written from the perspective of the availability transaction, however if HIAS were to follow this process HIAS would have to evaluate availability on every availability request.  Availability is static for a given POS, and only needs to be evaluated when inventory is updated.  For HIAS to meet its NFR targets it must do most of determine availability at the point of inventory adjustment. HIAS must pre-calculate (determines) availability as much as possible immediately after an ICR update, and cache availability constraints in the flight availability space for all RBDs. The elaboration presents a summary of the determine availability post ICR update and the availability processing (section §15.1). GlossaryThe UC uses the following termsReferencesActorsPrimary Actor: The primary actor is Inventory Enquirer which sends transactions to be evaluated.General PreconditionsThe Subscription Type is Financial or Segment Allocation.Basic Flow of EventsBasic Flow 1 – Determine Allocation Availability for Host Flight SegmentsSpecific Preconditions  Allocation availability is requested for one determined set of routings that contain at least a Subscriber actionable flight segment over a market, as determined and informed by the NGI UC for Availability Orchestration.Note: The UC for Availability Orchestration has determined one or many sets of routings over a requested market. This Flow determines Allocation Availability for each set of routings. For each host actionable segment in a routing, the NGI UC for Availability Orchestration has also determined the RBD's that need to get availability for a particular availability request.Story Avail.24x would add Availability Orchestration process, which will eventually trigger this UC with the preferred routings & flight numbers for the city-pair requested or only flights when request is flight specific. To deliver this story development can continue to use HIAS InventoryEnquirer / ConnectionEnquirer functionality to determine best connections and thereby identify host flights for which availability is required. Hence, the flow can start from Step 3.StepsThe system has already identified the requestor details viz., Internal/External, POS, Point-of-origin (POO) and up-line / down-line stations from the incoming request prior to start of this flow.System locates the next routing that contains at least a host actionable segment.System selects the next host actionable flight segment from the routing.System validates the host flight segment date against the User Parameters: Open For Sell Date and the Maximum Sell Date. System calculates Booking Seat Available (BSA) and Waitlist Seat Available (WSA) for the RBD's on the segment using Sub Flow 1 – Determine Seat Available (SA) by RBD.RBD's on the segment are determined in the UC for Availability Orchestration.HIAS maintains availability for all constrained RBDs as a grid object in the flight availability space and it will return availability for all RBDs of a flight instance in one go. Note: All RBDs, which are governed by Hide/Inhibit RBD rule, are removed or dressed once they are fetched from flight availability space and only then returned to requestor. This is addressed by AVAIL.24f story.When system receives an error for a host segment from the Sub Flow 1, system returns the error message for the segment and joins Step 10.When the Search Type of the request is ""Determine Availability for Waitlist Sell"", system returns availability information for the RBD's. If availability status ""C"" or ""R"" or ""Q"" exists for an RBD, the availability status is returned for that RBD; if a numeric Segment Waitlist Seat Available (Seg WSA) value exists for an RBD, the Seg WSA is returned for that RBD. System joins Step 10.The element SearchType in the canonical for InventoryEnquirer is updated to support additional search request types.For 'Determine Availability for Waitlist Sell', the RBD (TravelPreference/ BookingClassPreference/ ResBookDesigCode) is included in the request and system will need to return waitlist availability for that RBD. When the request is not for Group Booking, system returns availability information for the RBD's: if availability status exists for an RBD, the availability status is returned for that RBD; if availability status does not exist for an RBD, the numeric Segment Booking Seat Available (Seg BSA) value is returned for that RBD.When the request is for Group booking, system calculates Group Seat Available (GSA) for RBD's on the segment using Sub Flow 2 – Determine Group Seat Available (GSA)System returns availability information for the RBD's: if availability status exists for an RBD, availability status is returned for that RBD; if availability status does not exist for an RBD, the numeric Segment Group Seat Available (Seg GSA) value is returned for that RBD.For Group availability request, system will calculate and fetch the availability information directly from the ICR, since this information is not maintained in the Flight Availability spaceWhen it is a Simulate Availability request, system returns all availability information assigned for the RBD's: the numeric Segment Booking Seat Available (Seg BSA) value, if exists, and Segment Waitlist Seat Available (Seg WSA), if exists, and availability status for the RBD's, if exists, and Segment Group Seat Available (Seg GSA), if exists.Availability requests triggered from Simulate Availability GUI (except numeric) are actioned directly from ICR and not pre-calculated.When the routing has more host actionable segment(s), system rejoins Step 2.When there is more routing, system rejoins Step 1.System resumes in the invoking Flow/Step.Specific Post ConditionsAllocation availability has been determined for the RBD's on host segmentsAlternate FlowsAlternate Flow 1 – Request Date Beyond Open For Sell Date This functionality already exists as delivered by INV.30b - Handle out of range availability request. However, this has to be tested as part of this task.Specific PreconditionsSystem has performed Step 3 of Basic Flow 1 – Determine Allocation Availability for Host Flight SegmentsAND System has determined that the flight segment date is later than the Open For Sell Date but is earlier or equal to the Maximum Sell Date.Steps System assigns availability status ""R"" (Request) for every RBD of all the host segments in the routing.System joins Step 11 for Basic Flow 1 – Determine Allocation Availability for Host Flight Segments.Specific Post ConditionsNone.Exception FlowsException Flow 1 – No online segmentsSpecific PreconditionsSystem has performed Step 1 of Basic Flow 1 – Determine Allocation Availability for Host Flight Segments, AND System is unable to locate a host segment in the routings.Steps System return the response indicating ""No Host Availability on requested market""Flow ends.Specific Post ConditionsSystem has no work to do on the routings for the requested market.Sub FlowsSub Flow 1 – Determine Seat Available (SA) by RBDThis Sub Flow determines Booking Seat Available (BSA) and Waitlist Seat Available (WSA) for RBD's on a host segmentThis flow will be triggered whenever there is an ICR update or for a new ICR. It will not be trigged during an availability request (except for step.1a). As such, the availability for every RBD are pre-determined and pushed to flight availability space for every flight instance. The data maintained are at a POS group level based on the most restricted value between the segment and its legs (refer to elaborations section §15.1 for implementation details).Where there are more than 'n' number of legs for a flight  then legs, POS and constrained segment(s) data is maintained in flight availability space.  Value of 'n' is defined by Subscriber Parameter 'Leg/Segment_Availability_Threshold' with a default value set to 2. Availability for such flights will need to be determined only at the time of receipt of request as per this flow and not pre-determined during ICR change.Specific PreconditionsSystem has performed one of the following steps:Step 4 for Basic Flow 1 – Determine Allocation Availability for Host Flight Segments.Steps System references the ICR record for the host flight instance When the ICR is non-existent, system logs and returns error indicating ""ICR non-existence"" and resumes in the Flow/Step where it was invoked.When the ICR Status is Protected or Suspended, system returns error indicating ""Flight is locked for schedule change"" and resumes in the Flow/Step where it was invoked.When the ICR is under Protective Cover AND the request Search Type is ""Determine Availability for Sell"" (Refer to System BDD for Availability Request – Response (Ref[9])), system returns error indicating ""ICR under Protective Cover "" and resumes in the Flow/Step where it was invoked.When the ICR is under Emergency Lock, system returns error indicating ""ICR under Emergency Lock and resumes in the Flow/Step where it was invoked.When the current local time of the origin station of the segment is after the departure time for the flight segment, the system returns error indicating “Flight departed” and resumes in the Flow/Step where it was invoked.When the segment has been “Closed Out” (departed), the system returns error indicating “Flight Closed” and resumes in the Flow/Step where it was invoked Apart from step.1a above, all other steps is pre-determined and pushed to flight availability space at the end of ICR change / inventory adjustment.HIAS will use error code and warning messages as per Industry Standards. Implementation must follow section §15.1.3.6 for the EDIFACT code and messages to return. For availability, errors are not logged but only returned to the requestor.System joins Step 26System selects the first or next RBD on the segment.When the value of the Stop Sale Indicator (SSI) either for the nested bucket / RBD or cabin or Tree Top is ""Y"" (Yes) for the segment or any leg of the segment, system assigns the availability status ""C"" for the RBD and joins Step 25.When the value of the External Stop Sale Indicator (ESSI) either for the nested bucket / RBD or cabin or Tree Top bucket is ""Y"" (Yes) on the segment or any leg of the segment, AND the request originator is NOT Internal Host, system assigns the availability status ""C"" for the RBD and joins Step 25.When the value of the Permanent Request Indicator either for the nested bucket / RBD or the cabin or  Tree Top bucket is ""Y"" (Yes) or ""Absolute"" on the flight segment or on any leg of the segment, When the request originator is Internal Host and the Subscriber Parameter Internal_Response_for_Permanent_Request is set to ""Seats Available"" (Refer to Special Requirement section)  system joins Step 6. When the request originator is Internal Host and the Subscriber Parameter Internal_Response_for_Permanent_Request is set to ""Queue Request"" (Refer to Special Requirement section), system assigns the availability status ""Q"" for the RBD When the request originator is NOT Internal Host, system assigns the availability status ""R"" for the RBD System joins Step 25.The Segment Booking Seat Available ( Seg BSA ) and Segment Waitlist Seat Available ( Seg WSA ) is assigned the value of the segment nested bucket of the RBD.System determines Segment Booking Limit Booking Seats Available ( Seg BL BSA ) and Segment Booking Limit Waitlist Seats Available ( Seg BL WSA ) from all the Segment Booking Limit buckets in the cabin that the request is based on given:Cabin codeRBDPOS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When at more than one Booking Limit bucket is located for the RBD, AND The Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Most Restrictive"" (Refer to Special Requirement section) , the lowest Segment Booking Limit Booking Seats available ( Seg BL BSA ) and Segment Booking Limit Waitlist Seats Available ( Seg BL WSA ) is assignedThe Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Least Restrictive"" (Refer to Special Requirement section):, the highest Segment Booking Limit Booking Seats available ( Seg BL BSA ) and Segment Booking Limit Waitlist Seats Available ( Seg BL WSA ) is assigned.System determines Segment Booking Limit Minimum Available Seats ( Seg BL Min ) from all the Segment Booking Limit buckets in the cabin if the segment is not Host Marketed / OA operated free sell agreement based on given:Cabin CodeRBD POS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When more than one Booking Limit bucket is located for the RBD, the largest Segment Booking Limit Minimum Availability ( Seg BL MIN ) is assignedThe lowest of the Segment Booking Seats Available ( Seg BSA ) and the Segment Booking Limits Booking Seats Available ( Seg BL BSA ) is assigned Segment Booking Seats Available ( Seg BSA )The highest of the Segment Booking Seats Available ( Seg BSA ) and the Segment Booking Limits Minimum Available Seats ( Seg BL MIN ) is assigned Segment Booking Seats Available ( Seg BSA )The lowest of the Segment Waitlist Seats Available ( Seg WSA ) and the Segment Booking Limits Waitlist Seats Available ( Seg BL WSA ) is assigned to Segment Waitlist Seats Available ( Seg WSA )System selects the first or next leg in the segment.System sets the Leg Booking Seat Available ( Leg BSA ) and Leg Waitlist Seat Available ( Leg WSA ) with the value from  the leg nested bucket of the RBDSystem determines Leg Booking Limit Booking Seats Available ( Leg BL BSA ) and Leg Booking Limit Waitlist Seats Available ( Leg BL WSA ) from all the Leg Booking Limit buckets in the cabin that the request is based on given:Cabin codeRBD POS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When more than one Booking Limit bucket is located for the RBD, AND The Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Most Restrictive"" (Refer to Special Requirement section) the lowest Leg Booking Limit Booking Seats available ( Leg BL BSA ) and Leg Booking Limit Waitlist Seats Available ( Leg BL WSA ) is assignedThe Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Least Restrictive"" (Refer to Special Requirement section) the highest Leg Booking Limit Booking Seats available ( Leg BL BSA ) and Leg Booking Limit Waitlist Seats Available ( Leg BL WSA ) is assigned.System determines Leg Booking Limit Minimum Available Seats ( Leg BL Min ) from all the Leg Booking Limit buckets in the cabin if the leg is not Host Marketed / OA operated free sell agreement based on given:Cabin CodeRBD POS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When more than one Booking Limit bucket is located for the RBD, the largest Leg Booking Limit Minimum Available Seats  ( Leg BL MIN ) is assignedThe lowest of the Leg Booking Seats Available ( Leg BSA ) and the Leg Booking Limits Booking Seats Available ( Leg BL BSA ) is assigned Leg Booking Seats Available ( Leg BSA)The highest of the Leg Booking Seats Available ( Leg BSA ) and the Leg Booking Limits Minimum Available Seats ( Leg BL MIN ) is assigned Leg Booking Seats Available (Leg BSA)The lowest of the Leg Waitlist Seats Available ( Leg WSA ) and the Leg Booking Limits Waitlist Seats Available ( Leg BL WSA ) is assigned to Leg Waitlist Seats Available ( Leg WSA )The lowest of the Segment Booking Seats Available ( Seg BSA ) and the Leg Booking Seat Available ( Leg SA ) is assigned Segment Booking Seats Available ( Seg BSA )The lowest of the Segment Waitlist Seats Available ( Seg WSA ) and the Leg Waitlist Seats Available ( Leg WSA ) is assigned to Segment Waitlist Seats Available ( Seg WSA )If this is not the last leg of the segment the system joins the flow at Step 12 When the Segment Booking Seats Available ( Seg BSA ) is less than or equal to zero (0) AND the Segment Waitlist Seats Available ( Seg WSA ) is greater than zero (0), system assigns the availability status ""L"" for the RBD and joins Step 25.When both the Seg BSA and Seg WSA are less than or equal to zero (0), system assigns the availability status ""C"" for the RBD and joins Step 25.When Search Type is 'Determine First Availability for Type-B Sell Failure', system determines the current most restrictive leg and segment RBD AVS status that applies for the Request Originator system by referencing the AVS buckets for the RBD on the flight leg and segment.When the most restrictive AVS status for the RBD is a closure status, system returns that AVS status and joins Step 25.Note: in this step, the RBD BSA is greater than zero (0) however an AVS closure status has been sent out as per the AVS trigger level controls. If the RBD BSA is 0 or less (handled in Step 22) then the RBD gets a closure status L or C for all Search Types.Note: At time of writing, it is assumed that AVS statuses for RBD's are stored in the AVS Buckets. The process to determine AVS status for an RBD will be detailed in the UC for Determine AVS Status.Processing availability by 'Determine First Availability for Type-B Sell Failure' to be addressed as part of Availability Orchestration and a future task.  When there is more RBD on the segment, system rejoins Step 2.System returns to the Flow/Step where it was invoked.Specific Post ConditionsSystem has determined RBD availability status and Segment Booking Seat Available ( Seg BSA ) and Segment Waitlist Seats Available ( Seg WSA ) for every RBD in the segmentOr an error has been logged.Sub Flow 2 – Determine Group Seat Available (GSA)This flow is triggered by an incoming availability request and not after ICR update (unlike Sub Flow 1)Specific PreconditionsSystem has performed one of the following steps:Step 8 for Basic Flow 1 – Determine Allocation Availability for Host Flight Segments.Steps System references the ICR record for the host flight instance System selects the first or next RBD on the segment.The Segment Group Seat Available ( Seg GSA ) is assigned the value of the segment nested bucket of the RBD System determines Segment Booking Limit Group Seats Available ( Seg BL GSA ) from all the Segment Booking Limit buckets in the cabin that the request is based on the given:Cabin codeRBDPOS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When at more than one Booking Limit bucket is located for the RBD, AND The Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Most Restrictive"" (Refer to Special Requirement section) , the lowest Segment Booking Limit Group Seats available ( Seg BL GSA ) is assignedThe Subscriber Parameter Booking_Limit_Booking_Seat_Available_Selection is set to ""Least Restrictive"" (Refer to Special Requirement section):, the highest Segment Booking Limit Group Seats Available ( Seg BL GSA ) is assigned.The lowest of the Segment Group Seats Available ( Seg GSA ) and the Segment Booking Limits Group Seats Available ( Seg BL GSA ) and the Segment Seats Available ( Seg BSA defined in step 9 in Sub Flow 1 ) is assigned Segment Group Seats Available ( Seg GSA )System selects the first or next leg in the segment.System sets the Leg Group Seat Available ( Leg GSA ) with the value from the leg nested bucket of the RBDSystem determines Leg Booking Limit Group Seats Available ( Leg BL GSA ) from all the Leg Booking Limit buckets in the cabin that the request is based on the given:Cabin codeRBD POS values of the request originator,Code Share Free Sell partner agreementPOO of the Online routing if the Subscriber Parameter POO_routing is set to “Online” (Refer to Special Requirement section) POO of the Trip routing if the Subscriber Parameter POO_routing is set to “Trip (Refer to Special Requirement section) Stations up line in the routing if the Subscriber Parameter UpLine_Downline_Station is “Routing” (Refer to Special Requirement section)Stations up line in the flight if the Subscriber Parameter UpLine_Downline_Station is “Flight” (Refer to Special Requirement section)When more than one Booking Limit bucket is located for the RBD, AND The Subscriber Parameter Booking_Limit_Group_Seat_Available_Selection is set to ""Most Restrictive"" (Refer to Special Requirement section) the lowest Leg Booking Limit Group Seats available ( Leg BL GSA ) is assignedThe Subscriber Parameter Booking_Limit_Group_Seat_Available_Selection is set to ""Least Restrictive"" (Refer to Special Requirement section) the highest Leg Booking Limit Group Seats available ( Leg BL GSA ) is assigned.The lowest of the Leg Group Seats Available ( Leg GSA ) and the Leg Booking Limits Group Seats Available ( Leg BL GSA ) and the Leg Booking Seats Available ( Leg BSA defined in step 17 in Sub Flow 1 for the same leg ) is assigned to Leg Group Seats Available ( Leg GSA )The lowest of the Segment Group Seats Available ( Seg GSA ) and the Leg Group Seat Available ( Leg GSA ) is assigned to Segment Group Seats Available ( Seg GSA )If this is not the last leg of the segment the system joins the flow at Step 7. The lowest of the Segment Booking Seats Available ( Seg BSA ) as returned in Sub Flow 1 and the Segment Group Seats Available ( Seg GSA ) is assigned to Segment Group Seats Available ( Seg GSA )When the Seg GSA for the RBD is less than or equal to zero (0), system returns the availability status ""R"" and joins Step 14.Note: When Group Seat Available is less than or equal to 0 and Booking Seat Available is greater than 0, group bookings must be requested, regardless of Waitlist Seat Available count for the RBD.When there is more RBD on the segment, system rejoins Step 2.System returns to the Flow/Step where it was invoked.Specific Post ConditionsSystem has determined availability status and Group Seat Available (GSA) count for every RBD on the segment.General Post ConditionsNoneExtension PointsThis UC is an include of the UC for Get Availability.Special RequirementsNavigation RequirementsNoneUsability RequirementsNoneNew Subscriber Parameter(s)A new Subscriber Parameter shall be introduced as below.Availability for Host Marketing Free-Sell Code Share (Future)A new Use Case needs to be defined in HIAS for processing incoming AVS messages (standard AVS and numeric AVS (AVA)) received from OA operating carriers for host marketing free-sell code share flights. Alternatively, a new Basis Flow shall be added to the existing UC for Full Inventory Adjustment to cover the availability adjustments for host free sale marketing code share flights. The below requirements shall need to be covered in that UC: Partner code share AVS/AVA received from the OA must be captured in ICR and reflected in nested buckets.A history item must be generated for every Partner AVS/AVA information captured in the ICR.System determines the Final nested bucket Booking Seat Available, Group Seat Available and Waitlist Seat Available counts from the nested bucket numeric Adjusted BSA, Adjusted GSA, Adjusted WSA (as calculated for nested buckets in host prime flights), the OA Partner AVS/AVA status and the applicable quota sale value, by referencing the Code Share Agreement Template for the host marketing flight, for the RBD.When Waitlist is not allowed in the Code Share agreement, the Final nested bucket Waitlist Seat Available count for all nested buckets/RBD's are set to Zero (0). Otherwise, the Final nested bucket Waitlist Seat Available count for nested buckets/RBD's are calculated as per the Steps (e) and (f) below.When the Code Share AVS/AVA Messaging Option for the host marketing flight is ""Standard AVS"", If the OA Partner AVS status is an open status (AS or LA) for a RBD on leg/segment:The Final nested bucket Booking Seat Available count for that RBD on the leg/segment is the lowest of the Adjusted BSA for the nested bucket and the Code Share quota sale for the cabin.The Final nested bucket Waitlist Seat Available count for that RBD on the leg/segment is the lowest of the Adjusted WSA for the nested bucket and the Code Share quota sale for the cabin. If the OA Partner AVS status is ""CC"", ""CN"" or ""LC"", ""LN"" for a RBD on leg/segment:Both the Final nested bucket Booking Seat Available count and the Final nested bucket Waitlist Seat Available count for that RBD on the leg/segment are set to Zero (0).If the OA Partner AVS status is ""CR"", ""LR"" or ""CL"", ""LL"" for a RBD on leg/segment:The Final nested bucket Booking Seat Available count for the RBD is set to Zero (0). The Final nested bucket Waitlist Seat Available count for that RBD on the leg/segment is the lowest of the Adjusted WSA for the nested bucket and the Code Share quota sale for the cabin.When the Code Share AVS/AVA Messaging Option for the host marketing flight is ""AVA"" (Code Share Numeric AVS), If the OA Partner AVS status is ""CN"" or ""LN"" for a RBD on leg/segment:Both the Final nested bucket Booking Seat Available count and the Final nested bucket Waitlist Seat Available count for that RBD on the leg/segment are set to Zero (0).If the OA Partner AVS status is a numeric value for a RBD on leg/segment:The Final nested bucket Booking Seat Available count for that RBD on the leg/segment is the lowest of the Adjusted BSA for the nested bucket, the Code Share quota sale for the cabin and the OA Partner AVA numeric value for the RBD.The Final nested bucket Waitlist Seat Available count for that RBD on the leg/segment is the lowest of the Adjusted WSA for the nested bucket and the Code Share quota sale for the cabin (Note: additional research will be needed to verify if waitlist must also be closed when OA AVA value is 0, if yes then WSA should be set to 0).When Group is not allowed in the Code Share agreement, the Final nested bucket Group Seat Available count for all nested buckets/RBD's are set to Zero (0). Otherwise, the Final nested bucket Group Seat Available count for nested buckets/RBD's are calculated as per the Steps (h) below.The Final nested bucket Group Seat Available count for all RBD's on the leg/segment shall be set to Zero (0) to denote all groups must be requested on host marketing free-sale code share flights. Note: The ""Group Booking"" option in the Code Share agreement will control whether group CJ's are allowed to create or not on host marketing flightsDefinition of Protective Cover conditionThe Protective Cover condition must be defined for HIAS 2.0 and reflected in the System BDD for ICR.Stop Sale Indicator (SSI) in MICT rules for Tree Top bucketsFor HIAS 2.0 the below must be updated for Tree Top buckets:- The Tree Top Control MICT rule needs updated to include an SSI- The Flight Close Control MICT rule needs to have the control ""Tree Top"" addedAdditional InformationThis Use Case determines allocation availability only for host segments. Availability for OA segments is determined by another HIAS Use Case. Allocation Availability is determined upon availability request, Sell request, or Cancel* request.*Note: For a Cancel, determination for Allocation Availability is limited to request for cancel part of a set of married segmentsThis Use Case determines seat available (SA) counts for RBD's on host segments, regardless of the number of seats requested. HIAS Use Case for Availability Orchestration will determine the final availability status to return, based on the SA counts and the number of seat requested.HIAS needs to identify whether a request is for group booking or for non-group, with an indication in the request. In the absence of such an indication, HIAS considers any request for more than 9 seats is for group booking and any request for less than.Changes to Reviewed Use CasesNoneFuture Use Case ConsiderationsNoneAssumptions & IssuesThe NGI UC for Availability Orchestration provides all details of the availability request, as per the System BDD for Availability Request – Response, to this UC.When the availability request date is beyond the Maximum Sell Date (defined by Subscriber Parameter) the NGI UC for Availability Orchestration returns error response without invoking this UC.AVS statuses for RBD's are stored in the AVS Buckets. The process to determine AVS status for an RBD on leg and segment will be detailed in the UC for Determine AVS Status (TBD).Outbound AVS statuses for Subscriber's flights are determined by another Use Case.For host marketing flight operated by OA, partner AVS status has been applied to nested seats available and current availability status.Use Case ElaborationAVAIL.26 – Determine Host Availability (Booking, Groups & Waitlist)SummaryThis task involves enhancing the existing availability determination process by pre-calculating the availability for each request and caching it in availability space of the grid. The task also delivers the capability to handle group & waitlist availability requests.ScopeApart from adding new functionality as mentioned below, the scope includes retesting what is already developed:Enhance processing of existing basic & numeric availability Handling additional subscriber parametersBooking_Limit_Booking_Seat_Available_SelectionBooking_Limit_Group_Seat_Available_SelectionInternal_Response_for_Permanent_RequestLeg/Segment_Availability_ThresholdProcessing Group & Waitlist request/responseProcessing availability during flight close, stop sale, permanent request etcExtend groups & waitlist in 'Simulate Availability' GUINew Search TypesAll flows of this use case are in scope of this task.  The task is limited to processing availability request received via Inventory Enquirer interface.Note: Availability processing due subscriber parameters 'POO_Routing' and 'UpLine_Downline_Station' are addressed in task Avail.24b, Avail.24c respectively. But, how their availability is pre-determined and their subsequent processing as a result of this enhancement is addressed here.DetailsAfter an ICR is updated due to inventory adjustment or create/update activity, system will trigger sub-flow 1 of this UC to pre-determine availability for each RBD.The summary of what needs to be done is explained below:System will determine availability for every RBD, based on most restricted value between the segment and its legs, for every POS group existing in the ICR (as per Sub-Flow 1). The availability data is pushed into the availability space only when constraints apply, else no data for the ICR would exist in the space. System would return availability from schedule segment data available in the grid in such case.Only minimal calculation or processing will take place while returning an availability response. System will just read through the data in availability space & return it 'as is' (unless additional restrictions apply to the request).When more restrictions apply such as per Hide/Inhibit rule, Quota sales, POO & upline/downline restriction or multiple POS, system will modify availability further prior to sending out the response for such requests.The below collaboration diagram briefly illustrates how availability is determined and cached.The actual architectural changes required to enhance availability processing is addressed as a separate task within NFR.07a.Process flow for determine availabilityThe manner, in which availability data is pre-determined and cached in the FlightAvailabilityState space maintained in grid, as per the sub-flow 1 is shown below:
Important aspects to consider during developmentFollowing are some of the important aspects that development team should take note of during delivery.Processing Basic & Numeric availability Once inventory adjust or ICR update is complete, system should commence determining availability starting lowest RBD (nested bucket) in each cabin of the ICR.Availability constraints are cached in flight availability space only when numeric availability for any of its RBD drops to 9 seats or less (since it is considered as a constraint), else discarded.Availability is cached as numeric value (when Seg BSA >0), 'L'-Waitlist (when Seg BSA<=0 & Seg WSA >0) or 'C'-Closed (when Seg WSA<=0) or 'R'-Request or 'Q'-Queue.In simulate availability (GUI); response is displayed in numeric availability format by default up to a max of 9 seats, even when BSA>9 (i.e., 1-9 or L or C).Adjusted booking limit seat availability (ADJ BL BSA) value of limit buckets is taken for determining POS availability.Only after the entire availability determination process is completed, should the system unlock the ICR.  The availability transaction must not lock the ICR.Processing Waitlist availability Waitlist availability is returned for every request by default when no booking seats are available, irrespective of request originator. For eg: waitlist response returned is RBD followed by 'L' (eg YL, BL, ML etc), or 'C' (eg YC, BC, MC etc).In simulate availability (GUI); value is displayed in full numeric waitlist availability (001-999 or C) format based on Seg WSA values only, regardless of WLA status (Note:SearchForFlightAvailability/SearchInfo/WaitlistAvailabilityInd or SearchForFlightSpecificAvailability/ SearchInfo/WaitlistAvailabilityInd = True in the request for simulate). When WLA is 'Yes', response is 3 digit availability followed by 'L' and when WLA is 'No' response is 3 digit availability followed by 'C' in simulate availability results. (Eg: Y015L B013L M000C H000L)Processing Flight closed / Stop Sale / Permanent-request availabilityWhile determining availability for each RBD, if it is closed or under stop sale or under permanent request, then it is a constraint and data cached in availability space.However as response could be different depending on request originator (internal or external), it is suggested to cache two levels of data – one each for internal and external.Store 'C' against RBDs when it is closed and/or under stop sale. Store 'R' against RBDs for permanent request for external requests only. For internal Host cache 'Q' or actual availability depending on subscriber parameter 'Internal_Response_for_Permanent_Request'.
Processing other availability statesWhen flight status is 'Protected'/'Suspended'/'Emergency Lock'/'Closed'/'Protective Cover', no availability by RBD is returned. System stores the constraint in the availability space, which is returned 'as is'. This must be populated in segment warning (ShowFlightAvailability/ResponseWarning/SegmentWarning)Processing Group availability Group availability is a special category availability request and infrequent. Hence it is not pre-determined or cached unlike others.Group availability request is honoured only when GroupBookingInd is set to 'true' in InventoryEnquirer, irrespective of request originator. Since request for group availability is rare, its availability is not pre-determined. The response is generated by retrieving the information (Seg GSA) from the ICR as per sub-flow 2 / basic flow 1. When group availability exists, response is returned in full-numeric format ie RBD followed by seats (eg Y050, B040, M030 etc). When Seg GSA is less than requested seats or zero (0), but booking seats are available (ie Seg BSA=>0) and/or WL seats are available (ie Seg WSA>0), then 'R' is returned for corresponding RBDs (eg Y050, BR, MR etc). If no seats are available in both Seg BSA & WSA, then return 'C'  against the respective RBDs (eg YR, BC, MC etc). 'C' is also returned when under 'flight closed' or 'stop sale'.When RBD is under permanent request 'R'-Request or 'Q'-Queue is returned just as in step 13.In simulate availability (GUI), when request is for group availability; response is displayed in full numeric group availability (001-999 or L or C) format based on Seg GSA values only. Handling POO & Up-line / Downline Whether POO and/or Up-line / Downline restrictions apply, can only be known based on the itinerary of the incoming request. However for the purpose of availability determination, these are considered as a separate POS group and their availability pre-determined and cached.Point of Origin (POO) is defined within a POS group and therefore can be identified by their POS group (name and number), hence not an issue. When the system receives an availability request, it identifies the POO from the itinerary and based on that information identifies the POS group and returns availability response accordingly (Avail.24b has addressed this functionality).Up-line / downline restriction can apply to specific POS groups, in case they are defined in the booking limit template, else they could apply to all POS when not mentioned in BL template. When this restriction is limited by POS group, system can identify that POS whose availability is already pre-determined and cached. But when POS is not specified, it implies that the restriction will apply to all POS requests when their itinerary includes the up-line / downline stations.In such case, system must identify such BL templates (where POS group is not defined) and consider them as separate POS entities. Eg: if a BL Template exist with an Up-line restriction say JFK, then system should pre-determine availability for any request where Up-line station JFK could apply and cache it.
Representation of Data in Availability SpaceAn example of data cached in FlightAvailabilityState for a flight instance for different request originators.*If no data exists in the availability space, then system must return RBDs from schedule and display '9' against every RBD (eg: F9 C9 Y9 B9 M9 H9 Q9 T9)If multiple POS apply to a request, then the system must return the most constrained availability response for it. Eg: Assume system receives an availability request from an External originator with upline restriction, then in such case both POS (External) and POS4 (up-line) would apply. The system must return availability as follows for this request – F10 C10 Y5 BR MC HC QC TC (where most constrained availability for RBDs Y, B & Q are returned)Search TypesSearch type  includes following additional values (canonical)List of Error Codes / messages (pending)The following are the list of error codes and warning message that need to be returned.Simulate Availability GUIThe task includes extending capability in the availability simulation screen to search availability by groups and waitlist as shown below. AssumptionsSystem will be able to differentiate between Internal & external requestsClosed state for ICR can be achieved through SOAP GUIAvail.24b and Avail.24c are completed prior to this taskINV.66a2 & INV.66c are completed.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. Demo has to be done through SOAP UI, Giga GUI and Simulate Availability GUI.Note: The demo can be initiated either by making an inventory adjustment (Sell) or by re-dressing ICR Test DataUse test data provided in §15.1.7Non Functional RequirementsThe impact on availability performance should be less than 100 ms per single segment requests System is able to process 1000 availability requests per secondThe availability response time must be recorded for demo purposeFuture StoriesAvailability for flights under protective coverEDIFACT handling Processing different Search types.Host marketing Code Share availability processing Determine Availability ExampleAssume following multi-leg flight BA100 operating as below with single-cabin configuration with RBDs - YBMWith below nesting dressed to all legs/segsAnd have following two booking limit buckets assigned to each of its legs and segs as below.	Note: ATL will fall under both the POS groupsThe ICR and Availability on 'B' RBD is as follows for each leg and seg initially.*	Availability is cached only when RBD is constrained 1st Adjustment: After POS (normal) sells 10 seats on ATL-LHR segment2nd Adjustment: After POS (US) sells 10 seats on ATL-LHR segmentAvailability is cached since it is constrained3rd Adjustment: After POS (ATL) sells 15 seats on LHR-DEL segmentNote: Negative BSA is rounded off to 0The process of determining availability for POS (ATL) on ATL-DEL segment after 3rd adjustment is shown below."
NGI UC for Manage Cabin Configurations.docx,"UC1160  (SCHED.28de) Version Delivery Scheduling InformationApprovalsAuthor: Document version: Document Date: Revision History
Contents1.	Brief Description	71.1	Background	71.2	References	82.	Actors	83.	General Preconditions	84.	Basic Flow of Events	84.1	Basic Flow 1 – Create Airline-Specific Cabin Configuration	84.1.1	Specific Preconditions	84.1.2	Steps	84.1.3	Specific Post Conditions	94.2	Basic Flow 2 – Extract Airline-Specific Cabin Configuration	94.2.1	Specific Preconditions	94.2.2	Steps	94.2.3	Specific Post Conditions	94.3	Basic Flow 3 – Update Airline-Specific Cabin Configuration	94.3.1	Specific Preconditions	94.3.2	Steps	94.3.3	Specific Post Conditions	104.4	Basic Flow 4 – Delete Airline-Specific Cabin Configuration	104.4.1	Specific Preconditions	104.4.2	Steps	104.4.3	Specific Post Conditions	104.5	Basic Flow 5 – Create/Update Global Default Cabin Configuration	114.5.1	Specific Preconditions	114.5.2	Steps	114.5.3	Specific Post Conditions	115.	Alternate Flows	116.	Exception Flows	116.1	Exception Flow 1 – Validation Error	116.1.1	Specific Preconditions	116.1.2	Steps	126.1.3	Specific Post Conditions	126.2	Exception Flow 2 – No Records Found on Match	126.2.1	Specific Preconditions	126.2.2	Steps	126.2.3	Specific Post Conditions	126.3	Exception Flow 3 – Deletion Error	126.3.1	Specific Preconditions	126.3.2	Steps	126.3.3	Specific Post Conditions	137.	Sub Flows	137.1	Sub Flow 1 – Create History Item	137.1.1	Specific Preconditions	137.1.2	Steps	137.1.3	Specific Post Conditions	138.	General Post Conditions	139.	Extension Points	1310.	Special Requirements	1310.1	Navigation Requirements	1310.2	Usability Requirements	1311.	Additional Information	1412.	Changes to Reviewed Use Cases	1413.	Future Use Case Considerations	1414.	Assumptions & Issues	1415.	Design Constraints	1416.	Use Case Elaboration	1516.1	SCHED.28d Cabin Configurations CRUDE Service	1516.1.1	Detail	1516.1.2	Acceptance Tests	1516.1.3	Non Functional Requirements	1716.2	SCHED.28d1 Enable SITA Admin to Create Cabin Configurations on Behalf of Subscribers	1816.2.1	Overview	1816.2.2	Detail	1816.2.3	Acceptance Tests	1816.3	SCHED.28e Cabin Configurations GUI	1916.3.1	Detail	1916.3.2	Acceptance Tests	1916.3.3	Non Functional Requirements	2116.4	HIST.01.CBND: Cabin Configuration (Description) history	2116.4.1	Scope	2116.4.2	Details	2116.4.3	Acceptance test	2516.5	SCHED.28f Add DOW and ACV to SCT conditions	2716.5.1	Summary	2716.5.2	Detail	2716.5.3	Acceptance Tests	30Brief DescriptionThis Use Case describes the process that allows subscriber user to display, create and update Cabin Configurations.BackgroundCabin Configurations is an extension of Schedule Control Table (SCT) functionality which allows definition of sets of cabins that will be used by a specific airline. A cabin can be defined with attributes such as code, description, hierarchy and colour. SITA Administrator performs a one-off task of creating a global default cabin configuration which serves as a superset for selection of airline-specific carrier configurations. Subscriber Administrator will be allowed to choose cabins he uses from the global default cabin configuration. A subscriber can create his own view of cabin configuration for any airline. Subscriber can specify a name for every cabin different to default name. For non-hosted airlines he can also define his view of RBD codes for every cabin.Usage of Cabin Configurations with DCSDCS processes will use the cabin codes and its associated RBD's only for look up purposes. There is no requirement in DCS to use the “Assign RBD” Schedule Control rules created in IAS.Possible scenarios are listed below:Cabin and RBD information is often missing for OA carriers in OAG SDS. Hence, during Flight Profile creation the Flights domain will access IAS Cabin Configurations in order to look up Cabin-RBD mapping for non-hosted OA carriers in case this information is missing in IAS Schedules.  

Cabin Configurations will not be used for creation of Flight Profiles for hosted airlines because Cabin-RBD information for hosted airlines is always available in IAS Schedules.

As a rule, if Cabin-RBD information is present in Schedules for a specific host or OA flight, it should be used, as being more accurate, instead of generic information given by Cabin Configuration.  Cabin-RBD information for non-hosted carriers from Cabin Configurations will be used by DCS in case an individual name item on the PNL does not have a Cabin Code/RBD specified. I.e. if passenger to be booked in Economy, then HDCS will create CJ Record with identical Cabin/RBD (Cabin Code = Y and RBD = Y).DCS will access Cabin Configurations for generic information about ALL cabin codes used by a certain host or OA carrier (instead of looking through all available Aircraft Configurations). An example scenario would be creating of Baggage Allowances.Carrier-specific cabin “names” from Cabin Configurations will be printed on boarding passes.Generic cabin colors will be used on seat maps for both hosted and OA airlines.There is no requirement for DCS to use cabin hierarchy from Cabin Configurations for hosted carriers. The assumption is that cabin codes in IAS host Schedules are always ordered from upper to lower.
However there may be a requirement in future to validate new IAS Aircraft Configurations against Cabin Configurations to prohibit creation of ACs with more than one cabin of same hierarchy (for example cabins C and J would typically be mutually exclusive within the same flight).ReferencesActorsPrimary Actor: SITA Administrator, Subscriber Administrator (DCS user)General PreconditionsNoneBasic Flow of EventsBasic Flow 1 – Create Airline-Specific Cabin ConfigurationSpecific Preconditions  Actor is successfully logged into the system.Actor is either subscriber user or SITA Admin authorized to create airline-specific cabin configurations.StepsActor selects to create airline-specific .System responds with data elements to create airline-specific  using
BDD [1] section 2.1 – Create/Update airline-specific Cabin Configuration.Actor provides information for  data elements.Actor submits information.System validates  information using BDD [1] section 2.1.System creates the .System notifies Actor of success. Flow endsSpecific Post ConditionsSystem created the .System responded with a successful create message.Basic Flow 2 – Extract Airline-Specific Specific Preconditions  Actor is successfully logged into the system.Actor is either subscriber user or SITA Admin authorized to extract airline-specific .StepsActor selects to extract airline-specific .System responds with data elements for the extract criteria using BDD [1] section 2.2 – Search Criteria for Airline-specific Cabin Configuration.Actor provides search criteria.Actor submits information.System validates  information using BDD [1] section 2.2.System selects  that matches the extract criteria.System responds with data elements for  using BDD [1] section 2.1 – Create/Update airline-specific Cabin Configuration..Flow ends.Specific Post ConditionsSystem extracted a list of  records.Basic Flow 3 – Update Airline-Specific Specific Preconditions  Actor is successfully logged into the system.Actor is either subscriber user or SITA Admin authorized to update airline-specific .Actor completed Basic Flow 2 – Extract .Note: the user must not be allowed to remove the last remaining Cabin from the cabin configuration. There must be at least one cabin specified.StepsActor updates information for airline-specific  data elements. Actor submits information. System validates  information using BDD [1] section 2.1 – Create/Update airline-specific Cabin Configuration.System updates .System notifies Actor of success. Flow endsSpecific Post ConditionsSystem updated  for changed data elements.System responded with a successful update message. Basic Flow 4 – Delete Airline-Specific  Note: this flow is not used in GUI.Specific Preconditions  Actor is successfully logged into the system.Actor is either subscriber user or SITA Admin authorized to delete airline-specific .Actor has completed one of the following steps:Step 7 for Basic Flow 2 – Extract .StepsActor selects to delete airline-specific .System prompts Actor to confirm delete.Actor confirms delete.System deletes airline-specific .System notifies Actor of success. Flow endsSpecific Post ConditionsSystem deleted .System responded with a successful delete message.
Basic Flow 5 – Create/Update Global Default Cabin Configuration Specific Preconditions  Actor is successfully logged into the system.Actor is SITA Admin authorized to create/update the global default .Note: the user must not be allowed to remove the last remaining Cabin from the cabin configuration. There must be at least one cabin specified.StepsActor selects to manage Cabin Configuration.In case the Global Default Cabin Configuration does not exist, system responds with data elements to create it using BDD [1] section 2.3 – Create/Update Global Default Cabin Configuration. In case the Global Default Cabin Configuration already exists, system responds with data elements to update it, using the same BDD.Actor provides information for  data elements.Actor submits information.System validates  information using BDD [1] section 2.3.System creates/updates the .System notifies Actor of success. Flow endsSpecific Post ConditionsSystem created/updated the Global Default  for changed data elements.System responded with a successful update message. Alternate FlowsNoneException FlowsException Flow 1 – Validation ErrorSpecific PreconditionsSystem has performed one of the following steps:Step 5 for Basic Flow 1 – Create Airline-Specific .Step 3 for Basic Flow 3 – Update Airline-Specific .Step 5 for Basic Flow 5 – Create/Update Global Default Cabin Configuration.Steps System detects one or more business rule violations.System retains the information entered.System responds with error messages indicating the data elements for which business rules are violated.  Flow ends.Specific Post ConditionsSystem responded with appropriate error message.System remains unchanged for .  Exception Flow 2 – No Records Found on MatchSpecific PreconditionsSystem has performed the following step:Step 6 for Basic Flow 2 – Extract .Steps System detects no matches for System responds with a message indicating  not found.  Flow ends.Specific Post ConditionsSystem responded with a message indicating  not found. System remains unchanged.  Exception Flow 3 – Deletion ErrorSpecific PreconditionsSystem has performed the following step:Step 4 for Basic Flow 5 – Delete .Future sprint requirement: prohibit cabin code deletion or update by SITA Administrator if it is in use in at least one carrier-specific configuration. Currently Global Default serves simply as a template for creation of carrier-specific cabin configurations, there is no dynamic link between them. Also there is currently no requirement to maintain consistency between Cabin Configurations and cabin codes used in Schedules, this may be a subject of future requirements.Steps System detects one or more rule violations while attempting delete activity.System responds with error messages indicating unable to delete .Flow ends.Specific Post ConditionsSystem responded with error message.System remains unchanged for .  Sub FlowsSub Flow 1 – Create History ItemThis Sub-Flow is used to create a History Item each time data is changed (Create/Update/Delete) within the system by another flow.  Specific PreconditionsData has been created, changed, or deletedSteps System will create a History Item consisting of the original data prior to update and the data reflecting the update. Control is returned to the invoking flow.Specific Post ConditionsA History Item has been created which includes both the original information in the database and the information that has been changed or deleted.  General Post ConditionsNoneExtension PointsNoneSpecial RequirementsNoneNavigation RequirementsNoneUsability RequirementsNone Additional InformationExample of default cabin configuration as set up by SITA Administrator: 

Hierarchy / Cabin Code(s) / Default Cabin Name / Cabin Colour
1   /   F, P   /   First Class   /   Red
2   /   J,C    /   Business Class   /   Blue
3   /   W      /   Premium Economy   /   Orange
4   /   Y,M   /   Economy   /   Green
5   /   TBD   /   TBD   /   Yellow
Subscriber Administrator
Separately, a Subscriber now needs to 'maintain' Cabin/RBD mapping per Handled Airline for Non-Res-linked airlines

They 'choose' a cabin from the SITA default list in one above, and the first RBD is always filled in as the Cabin class character and the default cabin name. They then need to manually enter the remaining RBDs per cabin. They may then choose to 'modify' the Cabin Name, if they wish.

Cabin   /   RBD   /   Name of Cabin
F      /   F,A   /   Diamond First Class
J      /   J,C,D   /   Pearl Business Class
Y     /   Y,B,T,R,V,U,S   /   Brass Economy Class

The above will be maintained at a Subscriber / Handled airline combination.
Changes to Reviewed Use CasesNoneFuture Use Case ConsiderationsNoneAssumptions & IssuesNoneDesign ConstraintsNone
Use Case ElaborationSCHED.28d Cabin Configurations CRUDE ServiceDetailNot all validation rules described in BDD are enforced by the schema. Both schema and BDD validation rules must be supported within the service implementation.Please note that Retrieve flow is not described here because it will not be frequently used. It should be developed for to comply with Reference Architecture requirements. For input/output parameters of the Retrieve operation of the webservice please refer to wsdl.Acceptance TestsThis story should be demonstrated by sending CRUDE requests to the service and viewing the response via soapUI. Note that tests 1-13 should be performed in context of specific Subscriber User performing CRUDE operations for respective subscriber.Non Functional RequirementsThe expected maximum reasonable number of Cabin Configurations is 5000 (assuming multiple subscriber-specific views per each airline).  The response time must be within 0.5 seconds (and preferably faster) for each type of CRUD transaction.
SCHED.28d1 Enable SITA Admin to Create Cabin Configurations on Behalf of SubscribersOverviewAs per this use case, a Cabin Configuration can be either Default (effectively a template created by SITA Admin) or it can describe cabins of a particular hosted or OA carrier. Every subscriber can create a Cabin Configuration describing cabins of the subscriber airline itself or any other airline. For example, Portway ground handler subscriber could create Cabin Configuration for S7 handled airline. In the same time, it is quite possible for another ground handler subscriber, for example, Swissport to create his own Cabin Configurations of S7. However, currently SITA Admin is not able to create Cabin Configurations on behalf of subscriber. This story enables him to do that.DetailGUI ChangesAcceptance TestsThis story should be demonstrated by sending CRUDE requests to the service and viewing the response via soapUI. Note that tests 1-13 should be performed in context of specific Subscriber User performing CRUDE operations for respective subscriber.
SCHED.28e Cabin Configurations GUIDetailWhere possible, the GUI client must perform all field validation checks as described in the BDD, in addition to server-side validation.The Cabin Configuration functionality should be accessible via Administration/Cabin descriptions menu item.If the currently logged in subscriber previously set up cabin configurations for multiple airlines, then he is able to switch between these carrier-specific cabin configurations using the “Airline code” dropdown (which works as a navigation control). During this switch, the GUI client should query the extract operation of the CRUDE webservice with a combination of subscriber code and airline code.
By default, the cabin configuration of the first airline in the list should be displayed.The subscriber can click “Create new cabin description” button in order to create his view of a cabin configuration for any airline. However he cannot create more than one cabin configuration per airline.If the subscriber has not set up any cabin configurations yet, then he should be presented with a blank “Create new cabin configuration” screen for the first airline in the list. When SITA Administrator impersonates as a SITA Administrator, he should only be able to create/modify Global Default cabin configurations. In order to be able to modify a carrier-specific cabin configuration created by a certain subscriber, he must impersonate as this subscriber during log in.The requirement to persist Created/Updated username and timestamp was missed in the original story for Cabin Configurations CRUDE webservice. It needs to be addressed in the current story to enable display of respective fields.tns:ExtractCabinConfiguration/tns:SearchCriteria/tns:Airline has been made optional to support populating the Airline Code dropdown on the Update GUIDue to change of requirements, the cabin Description field is marked as mandatory on GUI, this should be enforced by the client only. To avoid rework this field should remain optional in the server side for now, the schema will be updated in future iterations.Acceptance TestsNon Functional RequirementsSubscribers will use GUI for Cabin Configurations infrequently; for SITA Administrator setting up the defaults will most likely be one-off task. Therefore, there are no specific performance requirements for this screen.However, as per supplementary specification, in 99.5% of cases the screen response time should not exceed 2000ms. HIST.01.CBND: Cabin Configuration (Description) historyScopeThe scope of this story isRecord the history of cabin configuration upon its creation, update	 or deletion in the system.Prepare a transformation script to transform history records of cabin configuration for the GUI to render the history record (XML). Store the transformation script to transformation data store.Demonstrate search and viewing of cabin configuration history records in conjunction with Manage IAS History use case.DetailsCapturing History records for cabin configurationFollowing are the activities in the life cycle of cabin configuration where history record needs to be captured A new cabin configuration is created.A cabin configuration is updated.A cabin configuration is deleted.The history record comprises of 2 significant partsHistory index detailsThe cabin configuration represented as XMLIn case of create, the document with the content supplied during its creation.In case of update, the document after the update. In other words, the document with the new content.In case of delete, the document header (having the document identifier) without the content.History index details are used to specify attributes of the cabin configuration explicitly to make the history record searchable in the history data store. Please refer to HIAS BDD for Manage IAS History (Reference [3]) section 2.1 Create History Record for the complete (generic) set of data elements required for recording history. For cabin configuration history record, the following data elements must have specific values as detailed in the table belowThe story will need to invoke Create History record (flow) in Manage IAS History use case to record the cabin configuration history record.Preparing the transformation script to format cabin configuration history recordThis aspect of the story is to prepare the transformation agent script that is capable of transforming the cabin configuration XML (history) into a form suitable for displaying on the GUI.The transformation agent needs to translate the cabin configuration XML into Full Annotated (Labelled) Form Semi-Annotated FormFull Annotated (Labelled) FormIn the full annotated form, the cabin configuration XML will be formatted as text along with annotations (labels) alongside the values that indicates what a particular value stands for. Example of full annotated form is as below XS
CAB:P DESC:First class premium HIER:1 COLOR:Red RBD:P
CAB:F DESC:FirstClass HIER:2 COLOR:Red RBD:F A I R
CAB:J DESC:BusinessClassPremium HIER:3 COLOR:Blue RBD:J C I Z O
CAB:C DESC:BusinessClass HIER:4 COLOR:Blue RBD:M N K L
CAB:Y DESC:EconomyCoach HIER:5 COLOR:Green 5 RBD:Y M B Q EBNF (template):Semi Annotated (Compact) FormThe semi-annotated form is an optimised variant of the full annotated form. It is expected that a user who regularly views history records will be familiar with values in cabin configuration information such that the user may not need the support of annotations (or labels) to describe the values. With the absence of annotations (or labels), a history record can be displayed in much lesser space as compared to the full annotated form and thus display more history records.
Example of semi annotated form is as below
XS
P/First class premium/1/Red/P
F/FirstClass/2/Red/F A I R
J/BusinessClassPremium/3/Blue/J C I Z O
C/BusinessClass/4/Blue/M N K L
Y/EconomyCoach/5/Green 5/Y M B QEBNF (template):Export FormThe export form is used when the user chooses to save the cabin configuration history records that were fetched in the user's computer. In the process of exporting, the history records are transformed into a format described below using a transformation agent such as XSLT.	Example of export form (XSLT output) is as below		EBNF (template):EBNF (Template) fields to XML Schema MappingTo prepare the transformation scripts to output cabin configuration information in both forms, the following table provides the XPath mapping for the EBNF (template) fields. This mapping is valid for Full Annotated Form and Semi-Annotated Form.Store the transformation script to transformation data storeThis aspect of the story is to ensure that the transformation script(s) that was prepared is stored in the transformation data store. In the absence of this, the GUI will not be able to display the cabin configuration history record due to the lack of transformation agent (script). The transformation agent (script) is included in the response to extract history records.Please note that while storing the transformation agent script to the data store, the version(s) supported by the transformation agent is also stored.Acceptance testDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack.SCHED.28f Add DOW and ACV to SCT conditionsSummaryThis task addresses certain improvements to the SCT rules GUI to enhance its suitability for users in terms of presentation and interaction. The scope includes the following tasksChange the graphics, layout and text for the following SCT – Schedule Control ScreensNEW (conditions section)Search (Additional search options section)Add DOW and ACV fields to the following SCT – Schedule Control ScreensNEW (conditions section)Search (Additional search options section)Add an additional element called AircraftConfiguration of Type AircraftConfigurationIdentifierType to the XML schema (ScheduleControlsRuleManager)Detail Current GUI Presentation Search Screen (Additional search options section)Create NEW SCT Screen (Conditions section)Expected GUI PresentationExpected Layout, graphics, text for the following SCT screens is shown below.Search Screen (Additional search options section)Create NEW SCT Screen (Conditions section)This story involves adding DOW and ACV as conditions on the schedule controls rules.  There are also some items in the GUI clean up list for the schedule conditions panel as well. Both affect the schedule condition panel.  If these two tasks were combined we would expect the schedule condition panel and additional search options to look something like this It's has the same look and feel as the inventory rule conditions but does not include the arrival, mkt by, and op by conditions.SERVICEAircraftConfigurationIdentifierType is made up of the following elements as shown belowSERVICE CALLS FOR SEARCH, CREATE NEW AND UPDATE SCT RULESService: interface-ScheduleControlsRuleManagerInterface: ExtractScheduleControlRule   Operation: ExtractScheduleControlRule (search)Input:  ExtractScheduleControlRuleElement: /SearchCriteria/SearchConditions/AircraftConfigurationInterface: ManageScheduleControlRule Operation:CreateScheduleControlRule   (Create new)Input:  CreateScheduleControlRuleElement: /ScheduleControlRule/Conditions/AircraftConfigurationInterface: ManageScheduleControlRule Operation:UpdateScheduleControlRule   (update)Input:  UpdateScheduleControlRuleElement: /ScheduleControlRule/Conditions/AircraftConfigurationAcceptance Tests"
NGI UC for Manage and Process Product Display Order (AVAIL.32).docx,"NGI UC for Manage and Apply Product Display OrderUse Case Specification(Avail.32ab)Author: Nguyen Van BinhDocument version: 1.1Document Date: 2015-Feb-10ApprovalsRevision History
Contents1.	Overview	31.1	Brief Description / Background	31.2	References	31.3	Story Mapping	42.	Actors	42.1	Primary Actors	42.2	Secondary Actors	43.	General Preconditions	44.	General Post Conditions	45.	Basic Flow of Events	55.1	Basic Flow 1 – Apply Routing Sort Penalties Rules	56.	Alternate Flows	76.1	Alternate Flow 1 – Subscriber Routing Sort Penalties Rule Not Exists	77.	Exception Flows	78.	Sub Flows	88.1	Sub Flow 1 – Assign Routing Sort Penalties	89.	Special Requirements	109.1	Subscriber Parameter	109.2	Routing Sort Order in Simulate Availability	1010.	Assumptions, Issues & Future Use Case Considerations	1111.	Elaborations	1111.1.1	Test Cases	1412.	Additional Information	1512.1	HIAS processing for availability sorting at time of writing	1512.2	SITA RES functionality for product offering sorting	16
NGI UC for Manage and Apply Product Display OrderOverviewBrief Description / BackgroundThis use case describes the functional requirements for a HIAS Subscriber to manage the order in which routings are displayed in the responses to requests for city pair availability from Sales & Service and external systems (GDS and OA - Other Airlines). The managed order of the routings may also be used by any other city pair product offering in HIAS, for example to support passenger re-accommodation by Origin-Destination in the future phases.In SITA Reservations mainframe system, host airlines can control their default, biased displays of availability, timetable and schedule information for city pair product offerings. Many user parameters are used to define the sorting priority for each type of routing to be returned in the airline preferred displays. The airline can also define a list of preferred OA partners, either Alliance members or non-alliance airlines, and OA flights and city pairs. This list is used in combination with the user parameters so as to define the sorting order for OA services in the product offering responses. The Additional Information section of this Use Case details the user parameters and how they control the sorting order of product displays.In HIAS, each SITA Subscriber can manage, with business rules, the order in which they desire their city pair product offering.  This includes availability for their flights and OA services to be sorted in the default biased responses to host and external requests. Business rules are to assign a sorting penalty value for each routing in a response to a city pair product offering request. Routings with less penalty values are sorted above those with greater penalty values.These business rules will be maintained in Horizon Administrator as HA Agreements on a per subscriber bases. As such these need to be setup and managed using HA and are outside the scope of this use case. Additional information is provided in the Elaboration section to help and facilitate this activity.Basic Flow 1 of this Use Case describes the internal processing in HIAS that enforces the product offering sorting rules.ReferencesStory MappingThe Use Case breaks into the following stories:ActorsPrimary ActorsThe Actors are as follows:A system service for Basic Flow 1 – Apply Product Offering Sort OrderSecondary ActorsNoneGeneral PreconditionsThe airline is an Allocation and Availability (Full HIAS) Subscriber.Actor is logged into the systemActor is authorized to perform the functionality in this use case General Post ConditionsNoneBasic Flow of EventsBasic Flow 1 – Apply Routing Sort Penalties RulesAlternate FlowsAlternate Flow 1 – Subscriber Routing Sort Penalties Rule Not ExistsException FlowsNoneSub FlowsSub Flow 1 – Assign Routing Sort PenaltiesSpecial RequirementsSubscriber Parameter Subscriber parameter Default_Routing_Sort_Order must be created for the Subscriber to define to default sorting order for routings returned to a city pair product offering request.Routing Sort Order in Simulate AvailabilityThe Simulate Availability shall apply the Routing Sort Penalty rules, with the options to select the rule statuses (Active Only, or Active and Draft, or None).The “Sort By” selection in the Simulate Availability shall have an additional sort order:Departure Time (current): to simulate as if a request contains a sorting instruction by Departure Time. Routings are sorted by the sort penalty rule then by departure time.Arrival Time (current): to simulate as if a request contains a sorting instruction by Arrival Time. Routings are sorted by the sort penalty rule then by arrival time.Elapsed Time (New): Neutral (New): will ignore the Routing Sort Penalty rules, default to an unbiased sorting where the sort order is by departure time regardless of routing types.Assumptions, Issues & Future Use Case ConsiderationsAssumptionsIt is assumed that the system has processed an incoming product offering request and been able to determine:Whether the request is for city pair based, such as daily schedule request, city pair availability request.Whether the request is for a unbiased (non-sorted) response, or with specific type of display (Direct, Non Stop, By Departure Time, By Elapsed Time, By Arrival Time), or for a default carrier biased routing without any specific type of display.IssuesNoneFuture ConsiderationsThe entire Availability Family use cases will be reviewed and updated.Availability sorting rules to take into account the requester POS information as part of the rule conditions.ElaborationsThe purpose of this use case is to provide alternative displays of product availability depending on the subscriber’s preferences. Display of availability may be required due to a number of reasons but is commonly needed by Sales & Service and other external systems such as GDS and Other Airlines. The order of the displayed availability is typically biased in order to present the most beneficial product to the subscriber, higher in the list. Therefore this use case can be summarised as providing different sorting preferences for the display and presentation of the alternative travel options available.The sorting rules will depend on the subscriber’s preferences which are defined by providing a scoring scheme based. The penalties depend on the specific travel options such as the number of stops, the marketing and operating carriers for each part of the travel option among others. These penalty points will be stored in HA as HA agreements on a per subscriber basis and need to be used before every sort request. To provide an efficient means accessing these values they should be fetched from HA at start-up and cached in web logic.In order to measure the performance of the sorting process we must have the capability to optionally enable diagnostics that dump the time it takes to sort flights during a request. The expectation is that in all cases, it is possible to sort 1 week of city pair availability within 1ms.The sorting of availability upon a request is optional. A request may not require any sorting at all as this may be useful for other functionality such as Multi-day In the cases where it is requested but not defined the system falls back to a default sorting order which is also specified in HA. A subscriber parameter namely, Default_Routing_Sort_Order is used to hold this value.The following flow chart shows the outline of how the availability sorting is performed based on the subscriber’s parameter as setup in HA.Additionally the request for product availability display may be a biased or unbiased request. As discussed above this will affect how the products are sorted based on their departure and arrival time.Currently the availability search and sorting is performed by the InventoryEnquirer service. The SearchForFlightAvailability operation performs this task. An optional indicator namely, BiasedDisplayInd, has been added to the Searchinfo element of the input to the operation to show whether a biased or unbiased list is requested. It is this service that needs to be extended to implement this use case.The core task of this use case is calculating the total penalties associated with each one of the travel options offered. To perform this, the following activities need to take place for each travel option considered:Get the subscriber’s specific penalty points for the various carries and options from HA. This needs to be done only once for all travel options and must be cached in WebLogic for efficient access.The current process fetches routing from coherence for host and will determine routing using Djikstra for OA+Host. This results in the list of travel options.At the point of sorting we ALREADY have a list of travel options.  State this is a prerequisiteUse the legs, segments and the associated operating and marketing carriers. HIAS already has this data in the sched.seg cache in WebLogic.Calculate and aggregate the penalty points for each city pair.Sort the travel options based on the total penalties calculated.It is possible that the request for the travel options specifies a maximum page size. That means that once the options are sorted they are they are accessed one page at a time with the ability to do move downs. A spreadsheet (see ref[7]) has been provided to demonstrate the above for a simple scenario. As can be seen, for each travel option the legs and their respective operating carriers, the segments and their respective carriers are needed to compute the total penalty based on the rules defined in the flows above.Test CasesDefinition of Done (DoD) requires that all of the following tests have been created and passed. Note that for all the test cases below the prerequisite is that the list of travel options have already been constructed.Additional InformationPlease note that this section has been added for completeness and reference purposes only. It has no direct impact on this story or the use case.HIAS processing for availability sorting at time of writingRef [3] - IAS Story Detail AVAIL.11ab - Response Sorting including EDIFACT v1.1 already outlines a major part of the requirements in this UC. However, that Story only enforces the fixed sorting order as shown in the below table. The routing types in red are excluded or not fully supported.The Story also outlines the sorting within each routing type but is limited to the following fixed hierarchy:The number of stops Departure time (default), arrival time or elapsed time as requested.SITA RES functionality for product offering sortingProduct displays (Schedule, Timetable, and Availability) can be completely biased (in the favor of the airline) or completely unbiased (impartial or neutral).A biased display always gives favoured treatment to the airline by showing the flights first in the displays, regardless of the departure time.An unbiased display lists all flights in departure time sequence without any consideration of the airline operating the flight.  User may request the totally unbiased display functions ZA, ZS, ZD and ZF that do not consider the user parameters above.User parametersDisplay order is controlled by the User Parameters URDPR1 - URDPR9.  The displays are usually biased in favour of the SITA Reservations Host Airline.  The usual display order is outlined in the following chart.Within each of these priorities, flights appear in departure time sequence, from earliest to latest departure time.  The display order may be modified to instead give higher priority to flights with fewer connections (user parameter URDPRX) or flights with shorter elapsed flight time (user parameter URDPRE). User parameter URDPRE also allow host airline to define whether the sorting by elapsed time apply to all types of routings or only to connections.User parameter URDPRM (range 0 to 1, default 0 ) is used for controlling the display priority of host marketing flights.  When URDPRM = 1, host code share marketing flights have lower priority than host non-marketing flights in the display of Availability, Date Schedule and Timetable.  For all routings, (direct and connection) the higher the fraction of host non-marketing flight the higher the display priority.  If host marketing flight priorities of two routings are the same, the display priority is determined according to other display user parameters URDPR1 – 9, URDPRX and URDPRE. For Oneworld Alliance airlines, user parameter URDPRO may be used (requires to turn of user parameter URDPRM) to control display order for host operating, host marketing and Oneworld member services.  When URDPRO = 1, the host non-marketing flights will be displayed on the first page followed by the host code share marketing flights and ONEWORLD members flights in the Availability, Date Schedule and Timetable for all routings (direct and connection). If all type of routing co-exists, the display priority is determined according to other display user parameters URDPR1 - 9, URDPRX and URDPRE. The current POOL: table shall be used to identify ONEWORLD members' code.POOL tableThe Pool Flight Table (POOL:) defines which interline flights are pool flights.  After pool flights entered into the Pool Flight Table, their priority is determined by user parameters. The following parameters specifically relating to pool flights:URDPR3 - Pool direct flights.URDPR6 - Host airline to pool and pool to host airline connectionsURDPR8 - Pool to interline and interline to pool connections.Pool flight association between the SITA airline and partner is established via POOL: Table entries identifying 4 categories:All OA airline flights    	Specific OA Airline and Flight number   	All OA airline over a City pair   	Specific OA Airline and flight number over a city-pair   	The host airline can use this POOL table to identify all flights of a preferred partner, e.g., SkyTeam, OneWorld alliance, etc., for preferred availability and timetable displays. The host airline can define a dual airline code flight using POOL table.The change to the availability/schedule/timetable display is not immediate; it will be visible only after the weekly OAG tape load.Example of a POOL tablePOOL:L/APOOL FLIGHT TABLE - ALLAIRLINE/CITY PAIR BA    LHRCHI    BA    LHRDAL    BA    LHRGIG    BA    LHRLAX BA    LHROSA    BA    LHRPHL    BA    LHRPHX    BA    LHRSCL BA    LHRSFO    BA    LHRWAS    BA    LHRYUL    BA    LHRYYZ DJ    ADDJIB    DJ    DIRJIB    DJ    JIBADD    DJ    JIBDIR HA RK ABJADD    HA RK ABJFIH    HA RK ABJNBO    HA RK ADDABJ HA LH ADDFRA    HA DJ ADDJIB    HA KQ ADDNBO    HA IF ADDSXF HA RK FIHABJ    HA LH FRAADD    HA DJ JIBADD    HA RK NBOABJ LH    FRACHI    LH    FRAGIG    LH    FRAJFK    LH    FRALAX LH    FRAOSA    LH    FRAPHL    LH    FRAPHX    LH    FRASCL LH    FRASFO    LH    FRAWAS    LH    FRAYYZAIRLINE/FLIGHT NUMBER BA HA 123AIRLINE/FLIGHT NUMBER/CITY PAIR BA    005 /  LONOSA  BA    073 /  LONYYZ  BA   095 /  LONYUL BA    283 /  LONSFO  BA    293 /  LONMIA  BA   293 /  LONSCL LH    401 /  JFKFRA  LH    403 /  JFKFRA  LH   428 /  FRAATL LH    537 /  ADDFRA"
HIAS UC for Simulate Availability .docx,"Version Delivery Scheduling InformationApprovalsAuthor: Document version: Document Date: Revision History
Contents1.	Brief Description	51.1	Background	51.2	References	51.3	Assumptions	62.	Actors	63.	General Preconditions	64.	Basic Flow of Events	64.1	Basic Flow 1 – Basic Simulate Availability Request	64.1.1	Specific Preconditions	64.1.2	Steps	64.1.3	Specific Post Conditions	65.	Alternate Flows	65.1	Alternate Flow 1 – Advanced Simulate Availability Request	65.1.1	Specific Preconditions	65.1.2	Steps	75.1.3	Specific Post Conditions	76.	Exception Flows	76.1	Exception Flow 1 – Validation Error for Basic Request	76.1.1	Specific Preconditions	76.1.2	Steps	76.1.3	Specific Post Conditions	77.	Sub Flows	78.	General Post Conditions	89.	Extension Points	810.	Special Requirements	810.1	Navigation Requirements	810.2	Usability Requirements	811.	Additional Information	812.	Changes to Reviewed Use Cases	813.	Future Use Case Considerations	814.	Issues	815.	Use Case Elaboration & Story Breakdown	815.1	Basic Availability Simulation GUI – INV.11	815.2	Full Availability Simulation GUI – AVAIL.25a	915.3	Full Availability Simulation GUI – AVAIL.25b	9Brief DescriptionThis use case defines the Horizon Inventory Availability and Schedules (HIAS) Simulate Availability functionality. This function allows the user to test the impact of new on availability.BackgroundFlight availability returned by NGI is the result of a financial availability calculation,  and rules (influences) that manipulate the calculations and the response.Calculation of financial availability from bid prices and rules and the effect of influences combined make the NGI availability response obscure. In some cases, it will not be clear why NGI returns any given flight availability.To provide visibility and aid diagnosis of problems, NGI must provide the Inventory Analyst or central site administrator proving support with the capability to initiate and trace availability requests from different points of sale including the influences that were activated in computing the response. The business needs addressed by this Use Case include:Verifying the core availability calculation logic is working as expected including the validation that the needed inputs are flowing through as expectedConfirming that Influences are having their desired impact and not causing any unintended side effectsTesting the impact of new Influences prior to deploying themVerifying the responses for upper compartment requests which may not be using Financial Availability but can be affected by influencesReferencesAssumptionsDisplay the most restrictive availabilityDisplay in Cabin Order – RBD within Cabin (hierarchy that is defined in the schedule)ActorsPrimary Actor: The primary actor is an Inventory General PreconditionsActor is authorized to perform the functionality and has successfully logged into the systemThe system initialization has taken place with all appropriate data.Basic Flow of EventsBasic Flow 1 – Basic Simulate Availability RequestSpecific PreconditionsAvailability information exists for certain flights  StepsActor initiates Horizon Inventory AS Availability Simulation Search System responds with Simulation Search GUI ScreenActor provides the  Search parameters from BDD Simulate Availability – section 2.1    Actor submits System validates entered search criteria  System notifies Actor of success with display of results screenSpecific Post ConditionsSystem displays availability information for travel options and segments matching the search criteria entered by the userFlow 1 – Advanced Simulate Availability RequestSpecific Preconditions  StepsActor initiates Horizon Inventory AS  Availability Simulation Search System responds with Simulation Search GUI ScreenActor selects the Advanced Panel on the Simulation Search GUI ScreenActor provides the data for the advanced search from BDD Simulate Availability – section 2.2Actor submits informationSystem validates entered search criteria  System invokes Use case for POS Data Propagation (AVAIL.24 story) to apply POS restrictions.System notifies Actor of success. Specific Post ConditionsSystem displays availability information for travel options and segments matching the search criteria entered by the user. The system takes into account any existing POS restrictions that match the user’s request.Exception FlowsException Flow 1 – Validation Error Specific PreconditionsUser has defined input for Simulate Availability request and attempted to proceed with execution Steps System receives error response during processing the Simulate Availability requestSystem indicates the field which caused the errorSystem retains the information enteredUser has the opportunity to correct the data and resubmit the Simulate Availability request  Specific Post ConditionsIf another is found, the system responds with appropriate error message.If no error occurs during processing, system displays requested availability Sub Flows NoneGeneral Post ConditionsUsers will have the option to export the Search Results to an external comma-separated values (CSV) file.Extension Points None.Special RequirementsNone.Future Use Case ConsiderationsAbility to display ISSR availabilityIAM will manage the users that will have the capability of requesting and viewing:Full Numeric AvailabilityGroup AvailabilityUse Case Elaboration & Story BreakdownBasic Availability Simulation GUI – INV.11Story description is available on SVN. The scope included Host only availability simulation returning status availability information.Availability simulation GUI (resolve gaps) – AVAIL.25aThe scope of this story is to identify and resolve gaps from the original implementation of INV.11 story.The known gaps include:The order of RBDs in availability display must match the order of RBDs for this segment in schedules. For reference only, RBDs in schedule legs:
tns:ShowFlightSchedulePeriod/tns:ScheduledFlightOperationPeriod/sch:Legs/sch:Leg/sch:Cabin/sch:BookingClassList

Segment RBD overrides:
tns:ShowFlightSchedulePeriod/tns:ScheduledFlightOperationPeriod/sch:LegOverride/sch:BookingClassList

Note: inclusion of specific schedule RBDs in inventory is determined by Assign Nesting Template and dressing functionality which has been already implemented.Within availability response string, i.e. 
ShowFlightAvailability/tns:OriginDestination/inv:ODOptions/inv:ODOption/inv:Segment/inv:RbdList
and
tns:ShowFlightAvailability/tns:OriginDestination/inv:ODOptions/inv:ODOption/inv:Segment/inv:Cabin/inv:RbdListcolon must be used to delimit RBD and availability value, and commas must be used to delimit RBD-value pairs, for example: Y:5,B:C,HN:A
This is required to support 2-character PRBMs (“night flight indicators”) and enable the GUI client to parse availability response for multi-column display in Availability Simulation screen.“EQP” string should be displayed in Aircraft type column of search results if aircraft type varies across the segment’s legs (as indicated by inv:Segment/ inv:EquipmentType/inv:EquipmentChangeOfGuageInd)Number of stops column needs to be displayed, see BDD for schema mapping. Flight number must include suffix if it is present in schedules. Suffix should be kept in grid’s copy of schedules.
Other gaps should be reported if identified with regression testing. Once this story is complete, INV.11 will become deprecated, UC and BDD will become the master.Full Availability Simulation GUI – AVAIL.25bDetailsThe scope of the story includes:Advanced availability simulation:
- Section 5 of this use case, section 2.2 of the BDD. The existing functionality of AVAIL.24 (POS Data Propagation) is used to apply POS restrictions to availability during simulation.
GUI layout changes and enhancements (see BDD and wireframes for details):
- Inventory Status fieldset should be removed from search criteria.
- The radio button in basic search needs to be changed.
- Collapsible “Tree tables” layout needs to be used in search results.
- Add segment number and airline columns
- Make Date Range a radio button
- Remove max routes field
- Hovering over the values of “Stops” should list stop locations within a segment. (note: for stop locations to be returned in response, the following field must be set to True in the request: SearchForFlightAvailability)/tns:SearchInfo/inv:ReturnStopLocationsInd)
- Default sort order should be Departure time
- support of full numeric availability, groups and waitlists
- each RBD is a separate column, the availability value is zero filled. Please note that the GUI client will need to parse the availability response string returned by InventoryEnquirer, strip colons and treat commas as column delimiters; and also zero-fill full numeric values up to 3 digits.Displaying of full numeric availability for groups upon user’s request (see BDD sections 2.2 and 2.3 for details, supported with AVAIL.26 story on the server side)Display status and full numeric availability for waitlist (see BDD section 2.3 for details, supported with AVAIL.26 story on the server side)Displaying of full numeric availability upon user’s request (see below).Non-functional requirementsAs per supplementary specification, in 99.5% of cases the response time should not exceed 2000ms for a set of 20 travel options with 2 segments each displayed on a single search results screen. Worst-case scenario needs to be assumed, i.e. full numeric availability specific to POS with multiple attributes was requested; while 20 POS templates are set up, each of 10 items (test data of AVAIL.24 story can be re-used).Acceptance Tests  Support full numeric availability – AVAIL.25cDetailsPlease note that unless otherwise stated, the changes listed below must be supported for both InventoryEnquirer’s ports: SearchForFlightAvailability and SearchForFlightSpecificAvailability Also note that within SearchInfo the FullNumericAvailabilityInd, GroupAvailabilityInd and WaitlistAvailabilityInd elements are mutually exclusive.The scope of the story includes:Return full numeric availability upon request and apply POS restrictions when specifiedA new optional Boolean field has been added to availability request:
tns:SearchInfo/tns:FullNumericAvailabilityInd If set to true, then full numeric availability (i.e. numbers not capped by 9) should be returned in the response.Please refer to SAD architecture overview diagram [4] for location of the components mentioned below. For regular numeric availability requests (0-9 seats, A, C and L statuses in response) pre-calculated NAVN availability data from FlightNumericAvailabilityStatus (part of FlightManager in grid) is normally used.However for full numeric availability requests the system should bypass NAVN data and instead interrogate InventoryControlRecord and calculate full numeric availability on the fly, exactly how it is already done when NAVN is created/updated. The only difference is that full numeric availability response can return more than 9 seats available, and “A” status is never returned in such case. For reference only, the following usecase describes availability calculation: NGI UC for Basic Inventory Adjustment-CFT 0.2.docx section 4.2.2

An example response to full numeric availability request would be (assuming AVAIL.26 story is implemented and the waitlist status is returned):Y:112,B:34,M:9,H:L,Q:CAVAIL.24 story (NGI UC Data Propagation to POS) describes application of POS restrictions to regular numeric availability. However for full numeric POS-specific availability requests POS-NAVN should be bypassed and instead full numeric availability should be calculated exactly how it is prescribed by AVAIL.24 when POS-NAVN is created/updated. I.e. create a list of POS templates matching POS attributes of the availability request, determine booking limit buckets associated with those POS templates, and for every RBD select the most restrictive of leg, segment or applicable BL constraints. The only difference is that the response could return more than 9 seats available, and “A” status is never returned in such case.Schema path to POS attributes in availability request (for reference only):
tns:SearchForFlightAvailability/tns:POSNote: Availability for OA segments should still be based on Schedules and received OA AVS messages as implemented previously within TECH.15bc stories.Note: Full numeric availability support is currently required only for the purposes of Availability Simulation in IAS GUI.Full numeric availability requests will incur a small performance overhead since they have to interrogate the ICR to determine actual seat counts.  The additional performance overhead should be no more than 100ms as compared to NAVN-based regular availability request and 300ms if POS restrictions are specified.Apply POS restrictions to Group availabilityAVAIL.26 story describes how Groups availability should be returned if specifically requested for. To enable full support of Simulation GUI, the current story must apply any POS restrictions specified in the group availability request similarly to 1)Same performance requirements as for 1)Return Waitlist Seats Available upon request.A new optional Boolean field has been added to availability request:
tns:SearchInfo/tns:WaitlistAvailabilityIndIf set to true, then full numeric Waitlist Seats Available counts (WSA) should be returned instead of regular availability (i.e. SA counts). In such scenario WSAs should be returned regardless of SA levels or Waitlist Allowed (WLA) indicator.

For reference only, below is the path to WSA within the ICR schema:
tns:ShowICR/tns:InventoryControlRecord/tns:Legs/tns:FlightCabin/tns:TreeTopBucket/tns:NestedBucket/tns:AllocationCounters/tns:WaitlistSeatsAvailable 
and to WLA indicator:
tns:ShowICR/tns:InventoryControlRecord/tns:Legs/tns:FlightCabin/tns:TreeTopBucket/tns:NestedBucket/tns:AllocationControls/tns:WaitlistAllowedIndIf the user is requesting for waitlist availability by setting WaitlistAvailabilityInd to true, then “C” should be appended to WSA levels in the availability response for those RBDs with WLA indicator=false, and “L” when WLA=”true”. This will allow the user to see if waitlist has been forced closed, for instance via ICR GUI.Any POS restrictions specified in the waitlist availability request must be applied similarly to 1)Note: Full numeric waitlist availability support is currently required only for the purposes of Availability Simulation in IAS GUI.Same performance requirements as for 1)An example availability response to waitlist availability request would be:Y:23L,B:8C,M:0L,H:0CAcceptance Tests"
NGI UC for Activate Inventory.docx,"NGI UC for Activate InventoryINV.29, INV.28 	Version Delivery Scheduling InformationApprovalsAuthor: Document version: Document Date: Revision History
Contents1.	Brief Description	71.1	Terminology	71.2	Story Mapping	91.3	Assumptions	91.3.1	Inventory Activation	91.3.2	Inventory Retention	101.3.3	Miscellaneous	101.4	References	102.	Actors	113.	General Preconditions	114.	Basic Flow of Events	114.1	Basic Flow 1 – Activate Inventory for Planned Schedule Change	114.1.1	Specific Preconditions	114.1.2	Steps	124.1.3	Specific Post Conditions	124.2	Basic Flow 2 – Advance Inventory Detail Windows (INV.28)	134.2.1	Specific Preconditions	134.2.2	Steps	134.2.3	Specific Post Conditions	145.	Alternate Flows	155.1	Alternate Flow 1 – ICR cannot be deleted	155.1.1	Specific Preconditions	155.1.2	Steps	155.1.3	Specific Post Conditions	155.2	Alternate Flow 2 – Unexpected new ICR	155.2.1	Specific Preconditions	155.2.2	Steps	155.2.3	Specific Post Conditions	156.	Exception Flows	166.1	Exception Flow 1 – Inventory Activation ICR Error	166.1.1	Specific Preconditions	166.1.2	Steps	166.1.3	Specific Post Conditions	166.2	Exception Flow 2 – Inventory Activation Leg/Segment Error	166.2.1	Specific Preconditions	166.2.2	Steps	166.2.3	Specific Post Conditions	177.	Sub Flows	178.	General Post Conditions	179.	Extension Points	1710.	Additional Information	1711.	Future Use Case Considerations	1711.1	Documentation updates required	1812.	Use Case Elaboration	1912.1	INV.29a - Activate inventory: Schedule Change interface and Retention	1912.1.1	Overview	1912.1.2	Implementation Details	1912.1.3	Acceptance Tests	2012.1.4	Non Functional Requirements	2112.2	INV.29a-1 - Apply Inventory_Detail_Date Parameter during Schedule Change	2212.2.1	Overview	2212.2.2	Acceptance Tests	2212.3	INV.29b - Activate inventory: apply extra MICT actions	2512.3.1	Overview	2512.3.2	Acceptance Tests	2512.3.3	Non Functional Requirements	2512.4	INV.29c - Propagate Inventory Activation Information	2612.4.1	Overview	2612.4.2	Implementation Details	2612.4.3	Acceptance Tests	2812.5	INV.29d - Apply Inventory Activation Information	2912.5.1	Overview	2912.5.2	Acceptance Tests	3012.6	INV.29e - Notify Schedule Change on Inventory and Schedules Activation	3112.6.1	Overview	3112.6.2	Acceptance Tests	3212.7	INV.28 - Advance Inventory Detail Windows	3312.7.1	Overview	3312.7.2	Implementation details	3312.7.3	Acceptance Tests	3412.8	INV.29a-2 - Flight Dressing – Rework	3912.8.1	Overview	3912.8.2	Rework Details	3912.8.3	Additional examples for assigning segment inventory capacity	4012.8.4	Acceptance Tests	4112.9	INV.29a-3 - Flight Dressing - Groups and Waitlist	4212.9.1	Overview	4212.9.2	Details	4212.9.3	Acceptance Tests	4212.9.4	Non Functional Requirements	4412.10	INV.29i - Retain Manual/ RMS/ Bid Price indicator controls	4412.10.1	Overview	4412.10.2	Details	4412.10.3	Acceptance Tests	4412.10.4	Non Functional Requirements	4512.11	INV.29j – Process Host ASM in Gigaspaces	4612.11.1	Summary	4612.11.2	Overview	4612.11.3	Scope	4612.11.4	Acceptance Tests	47Brief DescriptionThis UC describes the process on the Inventory side to:Create, Update or Cancel an ICR and populate inventory controls for its legs and segments as a result of Schedule Change Activation. This is covered by Basic Flow 1 which is invoked by UC for Schedule Change Orchestration [1]Create new active ICR for the flight dates moving into the Inventory Creation Window and delete ICR’s moving out of the Inventory Preservation Window as the time goes by. This is covered by Basic Flow 2 which is invoked by UC for Daily Maintenance [2].TerminologyThis UC uses the following terms:Story MappingThe use case breaks into the following stories:AssumptionsThe following assumptions and considerations have determined the internal interface between the Schedule Change and Inventory domains.Inventory ActivationAny affected leg/segment needs to be re-dressed except those where the changes to schedules were too minor to affect Inventory (for example, meal code change or e-ticket indicator).Once inventory controls of a cancelled leg/segment have been retained onto a new one, it should not be processed anymore even if there are more occurrences of it in the Schedule Change Plan. This is in order not to have the retained controls overwritten by redressing.FROM-TO pairs with “Flight number change” type of change (where the flight number is the only thing that changes) can be treated in exactly the same manner as a pair of cancelled affected segment and new alternate one.Inventory RetentionInventory Retention is only performed in the following scenarios (provided that the alternative leg/segment falls into retention window defined by Inventory Penalties): Cancelled leg/segment (or a segment prohibited with Traffic Restriction A) onto a new leg/segment (whether it is a new leg/segment of an existing flight or a leg/segment of a new flight).Changed leg/segment onto itself (for example in scenario of equipment change).The requirement is not to perform retention when there is a difference in “Operated by” fields of the affected and alternate segments. This will be enforced by setting Inventory Retention indicator in the Schedule Change Plan (CHANGE.01h story).A leg/segment can only be used once for Retention whether it is on the FROM side or on the TO side. This assumption and the ones above are enforced during generation of Inventory From-To when Inventory Retention Indicator is set (by CHANGE.01h story).Retaining controls of cancelled legs/segments onto new ones is performed while dressing the new ones and not when processing the ones to be cancelled. This is to enable future performance optimizations (as some steps of dressing the Retention Target cabins could be skipped), and to avoid having to create new segments in the same time with cancelling the existing ones.Retention cannot completely replace dressing as Raiding controls, Booking Limit Bucket controls and ISSR levels are never retained.Cancelled legs/segments are soft-deleted (and purged later) to allow inventory controls to be retained from them.MiscellaneousThe requirement is to have segments with Traffic Restriction A dressed. Flagging them as restricted in order to exclude them from availability and sell responses may be a subject of a future story.ReferencesActorsNone (this use-case does not interact with any external systems or users).General PreconditionsThis UC has been initiated by an include action from one of the following:UC for Schedules Change OrchestrationUC for Inventory Daily Maintenance Process Basic Flow of EventsBasic Flow 1 – Activate Inventory for Planned Schedule Change Specific Preconditions  This UC has been invoked by UC for Schedule Change OrchestrationThe Planned Schedule corresponding to the ICR being activated has been activated.StepsSystem selects the next flight date (index date) among the affected segments of the current flight number taking into account schedule period start/end, frequency and days of week.
For new schedules, the dates to activate inventory for are additionally limited by Inventory Creation Window (see its definition in 1.1). This window does not limit inventory activation for schedule replacements or cancellations: the system should search for any existing ICRs beyond the window which could have been created by out-of-range sell.It is suggested that inventory should be activated by flight dates so that all legs/segments belonging to the same ICR are activated together.
Also, as a reminder, UC for Schedule Change Orchestration invokes activation of schedules and inventory for groups of intended DRAFT schedule periods with the same flight numberSystem attempts to locate the ICR being activated and performs the following checks based on the type of schedule changes of legs/segments belonging to the ICR:For new schedules ICRs must not exist.For replacements and cancellations, ICRs are expected to exist within the Inventory Creation Window.If all legs/segments are new, the system initiates blank ICR using the basic details from schedule (airline, flight number, and index date) and continues at step 5 in order to add legs and segments to it.If all legs/segments are to be cancelled, the system soft-deletes the ICR, records the cancellation of the flight in history using Sub Flow 13 of UC [6] and continues at step 12.System selects the next leg or segment of the ICR.System checks if the leg/segment actually does exist in the ICR being activated.If the current leg/segment has changes in schedules too minor to affect inventory, the system continues at step 10.If the current leg/segment is cancelled in schedules, the system soft-deletes the leg/segment from the ICR and continues at step 10.If the current leg/segment is created or changed in schedules, the system invokes UC for Dress Flight Basic Flow 1.If there are more legs or segments listed in the request the system rejoins step 5.For Evo subscribers, system evaluates the number of SITA RES subclasses in accordance with section 10.1.2 of UC for Evo Schedule Change Orchestration, flagging the ICRs that violated the limit and marking the Booking Limits to exclude during subsequent publication.  System sets the status of the current ICR to Protected. Note: this step is skipped if none of the ICR’s legs and segments has changes significant to affect inventory.If there are more flight dates to process, the system rejoins step 1.System returns the response to Schedule Change Orchestration indicating the intended DRAFT schedule periods which have been activated.This flow ends and processing resumes in UC for Schedule Change Orchestration.   Specific Post ConditionsSystem has Created, Updated or Cancelled ICRs.  This may include dressing and retaining inventory controls for new or changed segments. System has protected the ICR. System has returned the response to Schedule Change Orchestration.Inventory history reflects the ICR updates (future story).Basic Flow 2 – Advance Inventory Detail Windows (INV.28)This flow describes the automated process of creating new active inventory records (ICRs) for the future flight dates moving into Inventory Creation Window as the time goes by. It also covers deletion of ICRs which have already moved outside of Inventory Preservation Window. Please see section 1.1 for terminology.The diagram below illustrates the process of advancement of the inventory detail windows:XXXX(__________{TODAY__________________________________________++++}“TODAY” represents the current date in the host’s timezone, when this flow has been invoked_Underscores_ represent the existing Inventory Records which need to be preserved{Braces} represent the current Inventory Creation Window. It will be filled with ICRs once this flow has been completed+Green plus signs+ represent new inventory records which need to be created. Typically that would be for one day only but can be more in case inventory window advancement task was not triggered on the previous night for some reasonParenthesis “(“ demarks the lower boundary of the current Inventory Preservation WindowXRed crossesX represent the old inventory records that need to be deleted. Typically that would be for one day only Advancement of inventory details window is one of the Nightly Inventory Maintenance activities executed automatically on the nightly basis.Specific Preconditions  This flow has been invoked by the UC for Nightly Inventory Maintenance. StepsSystem determines the current Inventory Preservation Window which is common for all flights of the carrier. The window starts on the current date at the host’s timezone (as defined by Carrier_Local_Time_Zone SIAM parameter) minus the number of days specified in Departed_Flight_Date parameter plus Offset from the current task details (see [8] section 2.1) and lasts into infinity.System determines the current Inventory Creation Window which starts on the current date at the host’s timezone plus Offset. The window ends on the current date plus the number of days specified in Inventory_Detail_Date SIAM parameter minus one (since today is included into the number) plus Offset. System proceeds to the first or the next scheduled flight marketed by the current carrier.System calculates a temporary list of the current flight’s index dates to be covered with inventory. This list contains local dates on which the flight operates (based on the scheduled period, frequency and days of week) falling into the current Inventory Creation Window. Only Active schedules (both Standard and Ad-Hoc) are taken into consideration. For every date on the list without an existing ICR the system creates dressed ICR in Active status:Initiates blank ICR using the basic details from schedule (airline, flight number, and index date).Invokes [3] Basic Flow 1 for every leg and every segment of the flight being dressed. Dressing must be based on Effective Schedules (Ad-Hoc Schedules) for those dates where they exist. Also, creation of new ICRs is atomic at the ICR level, i.e. if dressing of a leg or a segment fails then the entire ICR must not be created and is counted as failed in statistics.UC for Dressing will in turn invoke UC for Inventory Adjust which will calculate Effective Inventory Controls and Seats Available. The calculation will be based on zero Seat Sold Counts (as no seats have been sold yet). UC for Inventory Adjust will also trigger creation of a History record.Note: The decision whether to create an ICR is based on the flight index date falling into the Inventory Creation Window. This means that for some multi-leg flights the local departure dates of downstream legs may extend slightly beyond the Inventory Creation Window.For Evo subscribers, system evaluates the number of SITA RES subclasses in accordance with section 10.1 of UC for Inventory Re-Dress, flagging the ICRs that violated the limit and marking the Booking Limits to exclude during subsequent publication. System deletes any existing ICRs of the current flight where departure date of the last leg (index date adjusted by date variation of the last leg) is earlier than lowest boundary of the Inventory Preservation Window. Sub Flow 13 of UC [6] is used to record Inventory History.If there are more flights to process for the current carrier the system continues at step 3.System updates detailed and summary statistics of the parent Nightly Inventory Maintenance task in Monitor HIAS using UC [10] Basic Flow 1 and BDD  [8] sections 3.2 and 3.3.1:Flights/Legs/Segments createdFlights/Legs/Segments deletedFlights/Legs/Segments failed (due to any dressing errors). If at least one leg or a segment has failed then all legs and segments of the flight are counted as failed. This flow ends and processing resumes in the invoking use-case.  Specific Post ConditionsEvery flight operation of the current carrier within the current Inventory Creation Window has a corresponding ICRFor the current carrier there are no ICRs outside of the Inventory Preservation WindowHistory reflects all creations and deletions of ICRs that occurred during this flowAlternate FlowsAlternate Flow 1 – ICR cannot be deletedSpecific Preconditions  System is performing step 6 of Basic Flow 2.StepsSystem detects that an ICR for a past flight outside of the Inventory Preservation Window is under Emergency Lock. System increases the “Flights Blocked” statistics counter by 1.System logs the fact that a flight under Emergency Lock could not be deleted.System continues processing other flights at step 6 of Basic Flow 2. Specific Post ConditionsSystem has skipped the ICR and has updated statistics indicating that the flight could not be deleted.Alternate Flow 2 – Unexpected new ICRSpecific PreconditionsSystem has performed step 5 of Basic Flow 2 for a certain ICR and has created the ICR.The created ICR has its index date earlier than the current date at the host’s timezone plus the number of days specified in the Open_For_Sale_Date (subscriber-specific SIAM parameter, typically 331 day). This may indicate that inventory and schedules are significantly out of sync which may be due to errors in inventory activation during schedule change.StepsSystem logs an error with Error Manager the fact that an ICR has been created within the Open for Sale window. This flow ends and processing resumes in the invoking flow.Specific Post ConditionsThe ICR is created.The system has logged that an ICR has been created within the Open for Sale window.Exception FlowsException Flow 1 – Inventory Activation ICR ErrorSpecific PreconditionsSystem has performed step 2 of Basic Flow 1.Steps System detects one or more of the following conditions: An ICR already exists for a new schedule.An ICR does not exist within the Inventory Creation Window for schedule replacements and cancellations. If ICR for a new flight already exists, the system logs an error with Error Manager (including error code, flight designator, index date and the attempted action), abandons inventory activation and resumes processing in UC for Schedule Change Orchestration.If ICR for the schedule being replaced does not exist within the Inventory Creation Window, the system logs a warning and continues at step 3 of Basic Flow 1 as if it was a new flight to be created. If ICR for the schedule being cancelled does not exist within the Inventory Creation Window, the system logs a warning and continues at step 12 of Basic Flow 1.Specific Post ConditionsSystem has recorded an error or warning in Error Manager.An ICR is created if it did not exist within the Inventory Creation Window for the schedule being replaced.  Exception Flow 2 – Inventory Activation Leg/Segment ErrorSpecific PreconditionsSystem has performed one of the following stepsSteps 5-9 of Basic Flow 1. Any step of Basic flow 1 of the included UC for Dress Flight Steps System detects one or more of the following conditions:The leg/segment to be created already exists within the activated ICR
(Error code: SegAlreadyExists)The leg/segment to be cancelled or changed does not exist in the activated ICR.
(Error code: SegDoesNotExist)UC for Assign Nesting Template invoked by UC for Dress Flight returns an error.
(Error code: NestingError)UC for Dress Flight returns an error of any other origin.
(Error code: MiscError)System logs an error message with Error Manager (including error code, details of the activated ICR, leg/segment details and the requested actions). System records the Segment Error Code to return it later to Schedule Change Orchestration and rejoins step 9 of Basic Flow 1.Specific Post ConditionsSystem has recorded the error in Error Manager.  Segment Error Code is recorded to return later it to Schedule Change Orchestration as a part of Inventory Activation response for the ICR.Leg/segment is not updated.Processing continues with the next leg/segment of the activated ICR.Sub FlowsNoneGeneral Post ConditionsNoneExtension PointsThis UC is an include UC forSchedule Change Orchestration. Daily Inventory Maintenance Process for Maintaining the ""Open for Sale Period"".   Additional InformationNoneFuture Use Case ConsiderationsFuture Use Cases shall consider scenarios where Seat Sold Count (SSC) can be retained for the ICR of an existing flight during the Activate Inventory process so as to minimize the volume of SSC Refresh during schedule change processing. The approach to processing of activation errors has yet to be defined. On one hand, a Schedule Change Plan can contain a lot of internal dependencies (like rebooking of passengers from a cancelled flight onto a changed one), and in theory even a single error may ruin it. On the other hand it is not possible to rollback Schedule Change due to massive amount of changes made.It may be necessary to rollback changes made on leg/seg level in case of an error.When deleting old inventory in Basic Flow 2 it may be necessary to make up closeout data for those flights which have not been closed yet (for example, by assuming that all bookings have boarded).It may be necessary to detect and log all occurrences of inventory records without corresponding schedules. Potentially such situations may occur, for example, when a schedule was cancelled but the corresponding inventory was not removed. They are not dangerous in the essence that inventory cannot be sold without schedules anyway but may indicate coding errors.
Currently it is not clear which of the inventory maintenance tasks should take responsibility of “repairing” inventory. Also, this is closely related to holistic handling of errors during schedule change which is still an open issue.If INV.28 is implemented prior to implementing inventory activation for ad-hoc schedules then a separate story will be required to test how ad-hoc schedules are accounted for during inventory window preservation.While dressing schedules during the Schedule Change, the system must only dress flights within the Inventory Creation Window. However, this rule would not allow creation of ad-hoc flights departing today from the airports having UTC offset significantly less than the carrier’s home.
For example, suppose the carrier is based in SYD and currently it is 21OCT in SYD. In HNL it may still be 20OCT and today’s departure from HNL may fall outside of the dressing window. Therefore, specifically for dressing ad-hoc schedules the window should be extended 1 day into the past (provided the ad-hoc flight’s time was not in the past at the departure station at the moment of schedule creation and dressing).Documentation updates requiredNGI BDD for Inventory From – To Record: To add the Change Indicator ""Number of Stops"" for Segment (Refer to BDD for Inventory From – To Record, Group: Change Indicators)UC for Generate Inventory From – To Record: To amend such that All Host Operated and Host Marketed – OA Operated flights have an Inventory From - To record created.
Use Case ElaborationINV.29a - Activate inventory: Schedule Change interface and RetentionOverviewThis story brings together already developed pieces of the dressing process and adds application of the remaining MICT actions. The scope of INV.29 includes:Invoking the existing Assign Nesting Template functionality on leg/segment basis and assigning default inventory controls based on the nesting template (existing functionality first developed during Stage 4 within INV.07).Applying extra MICT actions which may override the default controls: Inventory Capacity Adjustment, Cabin Controls, Tree Top Controls, Nested Bucket Controls, Booking Limit Controls. CRUDE for these actions was developed in INV.04F story.Performing Inventory Retention.Deleting the ICRs and ICR legs/segments to be cancelled.Protecting the affected and alternate ICRs in the beginning of Schedule Change Activation and unprotecting them once SnS Rebooking is over.Implementation DetailsThe following considerations should be taken into account during development:The call from Schedule Change to Inventory must NOT be performed over SOAP/HTTP due to performance considerations. Instead it should be made via internal interface of FlightManager service, which is described in BDD [4] and must be developed as part of this story.In order to minimise memory footprint ICR must not contain schedules data. Instead schedules data should be dynamically sourced from the existing schedules cache in grid.Inventory Activation must not start until the Planned Schedule for the activated ICR are propagated to grid. The suggested mechanism is that Schedule Change Orchestration sends the version of the schedules being activated to FlightManager, which checks if it matches the version of corresponding schedule in grid. 
If there is a mismatch, respective error code will be returned to Schedule Change, which is expected to wait and retry.Temporary copy of the leg/segment created at step 2 of UC for Dress Flight must not be persisted and must be purged once dressing of this leg/segment is over.Additional MICT actions which need to be applied within this story are specific to Cabin, Tree, RBD and Booking Limit Template. In the same time, Cabin/Tree/RBD/BL Template fields are part of MICT Action Details of these actions, whilst MICT Extract (and MICT search from GUI) can only be performed by fields in Conditions.
However, no update of MICT schema is required because during dressing MICT data is queried via fast internal non-service call, which needs to be extended to add Cabin, Tree, RBD and BL Template as search criteria. There is no requirement for the external MICT webservice to support Extract by these field. Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
Changes made to inventory should be demonstrated via ICR GUI.Non Functional RequirementsTime for activating a single flight with inventory retention should be measured and reported at the demo.
INV.29a-1 - Apply Inventory_Detail_Date Parameter during Schedule Change OverviewThe purpose of this story is to apply Inventory_Detail_Date SIAM parameter during inventory activation as part of Schedule Change. Summary of requirements:During inventory activation, inventory for new flights must only be created within the Inventory Creation Window (see its definition in 1.1) – typically between today and 338 days into the future. Currently inventory is created for 331 days from the beginning of a schedule period which is incorrect.Inventory Creation Window does not apply to replacements and cancellations which should be applied to any ICRs existing beyond the window (they could have been created by an out-of-range sell).Modified handling of data integrity errors comparing to the original INV.29 story – see updated Exception Flow 1. In particular, if an ICR does not exist within the Inventory Creation Window for a flight to be replaced then the ICR is automatically created.This story is expected to use real SIAM parameter values rather than fixed values. Therefore it should be implemented after ACRH.29 Synchronise subscriber options.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.  Similarly to INV.28 story, in all tests below D1 denotes the current date at the carrier’s home time zone. For example, if the carrier is based in ATL and now in ATL is 20SEP then D2 is 21SEP.The following diagrams illustrate the expected results of acceptance tests. Purple denotes dates with inventory and teal denotes scheduled flight dates without inventory. All specified date ranges are inclusive.Expected results of test 1: inventory has only been created only within the Inventory Creation Window i.e. for D338.
Expected results of test 2 after having replaced the schedule, having extended the Inventory Creation Window and having performed an out-of-range sale for D341: D338 is re-dressed, D339 is created, D341 is re-dressed. All three inventory records reflect the new capacity.Expected results of test 3 after having cancelled the schedule: inventory is not returned.
INV.29b - Activate inventory: apply extra MICT actionsOverviewThis story covers application of extra MICT actions during dressing of a flight: Inventory Capacity Adjustment, Cabin Controls, Tree Top Controls, Nested Bucket Controls, Booking Limit Controls.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
Changes made to inventory should be demonstrated via ICR GUI.Non Functional RequirementsTime for dressing a single flight with inventory retention and all MICT actions should be measured and reported at the demo.INV.29c - Propagate Inventory Activation Information OverviewThe scope of this story is to create operations on FlightInventoryService enabling propagation of auxiliary information from Schedule Change to the Inventory Domain. This information is used when activating inventory during schedule change.PropagatePropagateInventoryActivationInfo operation will be used by ScheduleChangeService as a way of propagating Inventory Activation Information to the grid. This information relates to Inventory domain and cannot be sent to the grid along with the activated schedules. Currently it comprises:Inventory Retention Candidates, i.e. the legs/segments which will receive retained inventory controls (“retention targets”) and optionally the corresponding cancelled segments which need their controls to be retained (“retention source”).
If retention source is blank, then it means that this is a changed flight, and controls will be retained from old version of the same flight. (From is the same is To in Schedule Change Plan.)
Otherwise, if both retention source and target are populated, it means that inventory controls are retained from a cancelled flight onto a new one.Unchanged legs/segments, i.e. those where the changes to schedules were not significant enough to affect inventory (for example meal code change). Therefore the corresponding inventory segments do not need to be re-dressed. Since it is expected that the number of such segments can be significant, skipping them during dressing can significantly speed up inventory activation.Both items above already exist in the Schedule Change Plan. CHANGE.03g story will enable Schedule Change to invoke PropagateInventoryActivationInfo for the current Schedule Change. Note that this operation is nothing more than a mechanism of getting the auxiliary data from the Schedule Change Plan into the grid. It is not exposed to any external consumers and provides no immediate benefit to the end user, therefore there is no use case or BDD for this CRD functionality. Please refer to schema annotation for specific field details. Also note that the service is not supposed to perform any business validation of the information provided by Schedule Change.Story INV.29e will enable the Inventory Activation process introduced by INV.29a to actually use this Inventory Activation Information: perform inventory retention and exclude unchanged segments from re-dressing. DeleteOnce inventory activation has been completed, this auxiliary information is no longer required and will be deleted by Schedule Change invoking the DeleteInventoryActivationInfo operation. This invocation is in scope of CHANE.03g.
ID of the Schedule Change Plan will be used as a key when issuing the delete request. Implementation DetailsPartitioning and PersistingThe data should be pushed into the grid using Map Reduce so that it can be used by Inventory Activation. It should be partitioned by the flight number so that each partition only has the information relevant to activation of its own flights. (Retention target’s flight number should be used if both source and target are specified, as in such case retention is actually performed when a new flight is created and not when the Retention Source is cancelled.)Inventory Activation Information stored in the grid should be mirrored in the database to enable resuming of inventory activation after the system shutdown.“Compressing” the DataBoth Retention Candidates and Unchanged Segments can be specific to single dates, however in most cases they will be the same for the entire period. Therefore the service supports sending the same information for a range of departure dates, and this should be used to optimize overall performance and minimise memory footprint.
Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
This story should be demonstrated via SOAP UI.
INV.29d - Apply Inventory Activation Information OverviewThe scope of this story is to use the auxiliary information during activation of inventory in grid. This information is propagated to grid by Schedule Change using PropagateInventoryActivationInfo operation of the FlightInventoryService (story INV.29c). It will be deleted by Schedule Change invoking DeleteInventoryActivationInfo operation once inventory activation has been completed.Identifying Legs/Segments to Perform Inventory RetentionSteps 2 and 13 of UC for Dress Flight have been changed to reflect the different way of triggering Inventory Retention process. Whenever the system dresses a leg/segment, it should check whether the leg/segment being dressed is listed among the Retention Candidates within the Inventory Activation Information, which was sent to grid by ScheduleChangeService in the beginning of Schedule Change execution (stories INV.29c and CHANGE.03g).Inventory retention should be performed if:The leg/segment being dressed matches Retention Target in Inventory Activation Info and there is no Retention Source. It means that the retention source is the same as the retention source, i.e. controls should be retained onto the leg/segment itself (by using a temporary copy created at step 2 of UCR for Dress Flight).
OR The leg/segment being dressed matches Retention Target and there is Retention Source specified. It means that the leg/segment being dressed is a new leg/segment which should receive its inventory controls from the specified Retention Source.Once retention source and retention target leg/segment have been identified, retaining of inventory controls is performed as described in UC for Dress Flight (assuming it was developed as part of INV.29a story).Note: specific operational departure date of the source of retention controls should be calculated by applying tns:RetentionSource/tns:RetentionSourceDateOffset to the operational departure date of the leg/segment being dressed. This is to support retention of inventory controls across different dates. For example, let’s suppose there is a flight MH1 departing at 11:30PM, and it has been cancelled during schedule change. Its controls are then retained onto a new flight MH2 (retention target), which departs at 00:30AM. If Retention Target and Retention Source are specified as date ranges, there should be a way of indicating that for every Retention Target its Retention Source departs on the previous day. RetentionSourceDateOffset allows to specify this:If it is zero, then retention source departs on the same day as retention target.If it is 1, then retention source departs the day after retention target.If it is -1, then retention source departs the day before retention target.Soft-Deletion of Cancelled Legs/SegmentsThere is an implicit requirement that to-be-cancelled legs/segments which are the source of retention controls must not be deleted until the inventory controls are retained from them onto corresponding new flights. INV.29a addressed this issue by assuming that individual legs/segments are activated in certain order (i.e. new legs/segments are dressed first); however this will not work with the current solution. Rather than physically deleting legs/segments to-be-cancelled, they should be marked in the grid by a special flag on leg/segment level. Soft-deleted legs/segments must be completely discarded from all uses as if they did not exist. (For example, they should not be used in availability calculation or show up in ICR GUI.) However, such legs/segments will still be accessible by inventory retention process.Purging of soft-deleted legs/segments will be triggered by unprotect inventory call from Schedule Change to the grid performed for individual flight dates as soon as re-accommodation for them has been completed (in scope of INV.14i story).Skipping Unchanged Legs/Segments when DressingStep 7 has been added to the current UC to enable skipping the dressing of a leg/segment if the corresponding changes to schedules were not significant enough to affect inventory. If the leg/segment being activated is listed among the Unchanged Segments within the Inventory Activation Information, which was sent to grid by ScheduleChangeService in the beginning of Schedule Change execution (stories INV.29c and CHANGE.03g), then this leg/segment should not be dressed.In addition, if all legs and segments of the ICR are listed as “unchanged” then the ICR is not protected at step 11 of the current use case.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack. Acceptance tests for this story are based on those from CHANGE.03b story. It is implied that the test data should be re-used. The story should be demonstrated via Schedules GUI, FROM-TO GUI, ICR GUI and Availability Simulation GUI.INV.29e - Notify Schedule Change on Inventory and Schedules Activation OverviewThe scope of this story is to notify Schedule Change service once the inventory records corresponding to a set of intended DRAFT schedule periods have been activated in grid. This activity is represented with step 6 in section 14.2.2.2 of UC for Schedule Change Orchestration.BackgroundWhen the system begins executing a Schedule Change Plan, the ScheduleChangeService invokes ActivateHostSchedules operation of the FlightSchedulesService with a set of intended schedule changes (i.e. DRAFT schedule periods) with the same flight number to be activated. (Described in CHANGE.03b story.)Then the Schedules Manager: 

1) Applies these changes to the existing ACTIVE schedules and defragments the result 2) Persists the resulting new schedules in the Weblogic’s database3) Calculates the difference (“delta”) between the new and old schedules and propagates it to the grid via ScheduleChangeAgent. (All of the above items are in scope of SCHED.03j story.)

Prior to applying the “deltas” to the active schedules in grid, FlightManager calculates leg/segment level difference between the two (i.e. identifies new, cancelled and existing legs/segments, which is covered by CHANGE.03b story). Once the schedules in grid have been updated, this difference is used as an input to Inventory Activation process, which was covered by INV.29 story.ScopeOnce the FlightManager finishes activation of all inventory records matching the leg/segment difference (identified from the current set of intended DRAFT schedule periods with the same flight number), it should invoke ScheduleChangeActivationStatus operation of the ScheduleChangeService. This operation should have been already implemented as part of CHANGE.03h story and allows Schedule Change to acknowledge the inventory activation and issue activation request for the next set of intended DRAFT schedule periods.The inputs to this operation are (see XML schema for types and multiplicities):ID of the schedule change plan for which the inventory has been activated. IDs of the intended DRAFT schedule periods, which triggered the inventory activation. Along with the ID of the Schedule Change Plan, they are used throughout the whole process as correlation IDs and allow the Schedule Change Process to orchestrate activation.Please note that in the future story INV.29h the inventory activation notification will be extended with error statistics. In the current implementation the requirement is only to log all errors with Error Manager. Even if there have been errors during activation, all the intended DRAFT periods with the current flight number should be included in ScheduleChangeActivationStatus request.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack. Acceptance tests for this story are based on those from CHANGE.03b story. It is implied that the test data should be re-used. The story should be demonstrated via Schedules GUI, FROM-TO GUI and SOAP UI.
INV.28 - Advance Inventory Detail Windows OverviewThis story covers Basic Flow 2 of the use case: creation of ICRs for the oncoming flight dates and deletion of inventory records for the flown flights.Advancement of Inventory Details Window is one of activities performed during Nightly Inventory Maintenance hence INV.28 can only be implemented after INV.69.This story is expected to use real SIAM parameter values rather than fixed values. Therefore it should be implemented after ACRH.29 Synchronise subscriber options.Implementation detailsAdvancement of Inventory Details Window is performed in grid by the FlightManager service, re-using the existing code for Inventory Dressing – see the sequence diagram below (based on the sequence diagram of INV.69)When determining which flight dates to dress FlightManager works off the local schedules cache in the grid rather than querying FlightSchedulesManager in Weblogic. It is assumed that the schedule change process will ensure that host schedules in grid are in sync with WeblogicThere is a possibility for nightly re-dressing process to run past midnight at carrier’s timezone. For consistency, any calculations of inventory windows must use the actual task start date at the carrier’s local timezone instead of the current date The Inventory Creation Window most likely will be limited to about 350 days. It is assumed that the time required for FlightManager to check if ICR exists against every scheduled flight operation within this window is insignificant (<5ms per flight is acceptable). If this is not the case then alternative solutions should be discussed with CFT ICRs for flights outside of the Inventory Preservation Window are physically deleted from the grid and the database (i.e. there is no need to put into PendingDeletion state)Unlike re-dressing, creation of an ICR is atomic. If an error occurs while dressing a single leg or segment of an ICR then the entire ICR is not persisted and the error is loggedIn order to limit impact on performance the system should perform inventory window advancement iterating by flight numbers. Multiple partitions can be performing the task in parallel. The control point is FlightManager which should distribute the task between partitions requesting to process no more than N flight numbers at a time, where N is a configurable value and can be 5 by defaultLike in Nightly re-dressing (INV.69), FlightManager puts processing statistics to TaskDetails element of the respective Task Log item by invoking the UpdateTaskLog operation.
The XML type to use for detailed statistics is NightlyInventoryMaintenanceStatisticsType defined in the Inventory Maintenance schema.
Summary statistics are also updated – see section 3.3.1 of BDD [8]Summary of logging requirementsThe service must at least log the following events (events with Error severity must be additionally logged in the ErrorsManager service):Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack. In all tests below, D1 denotes the current date at the carrier’s home timezone. For example, if the carrier is based in ATL and now in ATL is 20SEP then D2 is 21SEP.SOAP UI tests ideally should not depend on the specific values of SIAM parameters (namely, UTC carrier timezone, 7 and 338 days of the inventory window). The current values of SIAM parameters may be fetched using GetSubscriberParameters operation of the SubscriberProfileManager service.These tests focus on verification of the following requirements:Deletion of old inventory is based on departure date of the last leg. This is why the first schedule period of the test flight MH101 has two legs and the second leg has Date Variation +1.Flights outside of the current inventory window are not dressed by inventory window advancement process. In order to check that, the second flight MH303 is put entirely outside of the inventory window.Creation of new inventory is not only restricted by the current Inventory Creation Window but also follows the schedule pattern (taking into account days of week and frequency). This is why the third flight MH202 only operates on certain days of the week.Statistics are updated for both sunny-day scenarios as well as for failures. This is why the third flight is set up so that on a certain date it cannot be dressed with the existing nesting templates.If dressing of a single leg/segment fails then the entire ICR is not created.Inventory is created and/or deleted for ad-hoc schedules as well as for standard schedules.The tests assume that there are no other MH flights, which could alter the processing statistics namely those where Period Start adjusted by date variation of the last leg is less than D3 or Period End is greater than D338. In addition to that, a check must be built in to ensure that the individual tests are not separated by midnight at HNL, otherwise the processing statistics would not match the expected results. The following diagrams illustrate the expected results of acceptance tests. Purple denotes dates with inventory and teal denotes scheduled flight dates without inventory. All specified date ranges are inclusive.Expected results of test 1: inventory for MH101 has been created as a result of Schedule Change. Inventory for MH202 and MH303 was not created because both flights are outside of the current Inventory Creation window.
Expected results of test 2: inventory windows have been offset by 10 days simulating advancement. This causes inventory for D1 and D2 to be deleted. Inventory for D3 remains intact as its last leg has date variation of +1 and hence is still within the Inventory Preservation Window.Inventory for MH202 has been created in accordance with the flight’s operating days of week. Inventory was not created for Thursday due to dressing error.
INV.29a-2 - Flight Dressing – Rework OverviewThis rework task to flight dressing includes;Applying the correct logic when assigning nesting template to segments during dressing of segment ICRs.Validating the manner by which segment cabin inventory capacities are determined.Inventory Retention methodology will need to be modified to cater to different subscriber parameter, viz., Inventory_Bucket_Control_Type (AU or PLs)Rework DetailsThe framework for dressing an ICR is already covered under INV.29a task. However prior to taking up this rework task, it is assumed that the changes to FlightInventoryControlsManager interface as defined in [11] is already delivered. The following modifications need to be addressed as part of this story:While assigning nesting templates to segments (Step 3 of Basic Flow 1, [3]), the cabins of the nesting template must exactly match cabins of the segments longest leg by total kilometres   Eg: If there are three legs for a flight, where leg 1 is F/Y, leg 2 is C/Y & leg 3 is C/Y. Suppose Leg 1 is the longest leg but the sum of leg 2 and leg 3 miles are more, then the segment will have C/Y assigned (whereas, in current implement Leg 1 cabin F/Y is getting applied to the segment)Even though this is a part of INV.07c implementation, the above validation must be addressed within the scope of this task.The default Inventory Capacity assigned to segments (Step 4 of Basic Flow 1, [3]), prior to applying MICT rule 'Inventory Capacity Adjustment', should be the smallest capacity for the same cabin type across (i.e. common cabins)  all legs.Eg: if leg AB is F10Y200 and BC is F20Y100, then Seg AC should take smaller common cabin cap ie F10Y100. Some more scenarios are provided in section 12.8.3:Inventory Retention needs to support subscriber parameter 'Inventory_Bucket_Control_Type', which defines how the nested bucket controls are used to calculate effected bucket authorization. Sub Flow 1 of [3], is updated to cater to the changed definition. During retention, when an RBD is missing in the leg/seg of Retention Target flight the system should not add its protection limits (PL) to parent bucket RBD (This may involve removal of existing logic already implemented).Likewise when there are more RBDs in leg/seg of retention target flight than its retention source (vice versa case), the system must simply retain the PLs that were assigned to them by nesting template. Capping child controls by its corresponding parent controls is not required and in case this is implemented it must be amended. All capping is addressed as a part of UC for Full Inventory Adjustment, which is invoked during dressing by UC for Dress Flight. Booking Limit buckets should be dressed using most specific 'Inventory Capacity Adjustment' MICT rule, else by Inventory Capacity from schedules.Additional examples for assigning segment inventory capacityFew examples of how cabins are assigned to segments (based on nesting template) and the subsequent cabin inventory capacity that needs to be allocated to the segment (with multi-legs) is provided below. The leg distance (total kilometers) influences what cabins a segment will get assigned and in the next step the smallest capacity (of the common cabins) will then get assigned to the segment.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
Changes made to inventory should be demonstrated via ICR GUI.	INV.29a-3 - Flight Dressing - Groups and WaitlistOverviewThis story covers dressing leg / segment ICRs for Group & Waitlist. All MICT actions during dressing of a flight, including Inventory Retention for groups & waitlist need to be delivered in this scope.DetailsThis story should leverage the development work for dressing & retention, which is already delivered for booking controls (BAUs). All Steps of Basic flow 1, [3] are applicable to groups and waitlist.Groups and waitlist controls for legs and segments get created when they are dressed with default inventory controls (during step 5 of basic flow 1, [3], which further invokes UC for full inventory adjustment)Inventory retention as defined in Sub Flow 1 of [3], needs to be implemented for groups and waitlist controls also.Raiding is not within the scope of this story.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
Changes made to inventory should be demonstrated via ICR GUI.Non Functional RequirementsTime for activating a single flight with inventory retention should be measured and reported at the demo.INV.29i - Retain Manual/ RMS/ Bid Price indicator controlsOverviewThis story covers retaining Manual, RMS and Bid Price indicator controls as part of schedule change retention process.DetailsWhile retaining inventory controls during schedule change process from source flight to target flight, it is necessary to retain the following indicators alsoManual control indicator (ManualControlInd)Revenue (RMS) controls indicator (RevenueControl)Bid price indicator (BidPriceInd)A new step has been added to address this gap in the Inventory retention Sub Flow 1 of [3]. Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.
Changes made to inventory should be demonstrated via ICR GUI.Non Functional RequirementsTime for activating a single flight with inventory retention should be measured and reported at the demo.
INV.29j – Process Host ASM in Gigaspaces SummaryWhen an airline deviates from its standard schedule for a single operation of an existing flight (Flight identifier date) such as a change in equipment, aircraft configuration, routing, timing or other data or  cancellation of a flight are transmitted using the Ad-Hoc Message (ASM).This task addresses certain improvements to flight schedules in Gigaspaces (In Memory Data Grid) to enhance its suitability to handle and process (compute flight availability) for these Ad-hoc schedule messagesOverviewThe following ASMs will be handled for this taskASM / NEW – Insertion of new flight information, defined by aflight identifier that has previously not existedOrFlight identifier that had been cancelledASM/CNL – Cancels (i.e. declares as not operating) an existing flight identifierASM/RPL –Replacement of existing information for a flight identifier. Can be Change equipment information (EQT)Change Aircraft configuration version –ACV (CON)Change of flight identifier (FLT)Change of routing information (RRT)Change of time information (TIM)Change of information expressed by DEI (ADM)Any change that involves all of the above or any combination of the above (RPL)When a flight schedule is cancelled using ASM/CNL the Inventory status – Suspended is setWhen a flight schedule needs to be reinstated using ASM/RIN then status is reverted from Suspended to ActiveASM/NEW can also be a flight identifier that has previously been cancelled (Suspended) and ASM/NEW means that 'Suspended' is changed to 'Active' and flight is re-dressed.ScopeThe scope for this story is to test a set of acceptance test scenarios. No fresh development is expected to be part of this story.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add the test pack.              Sample Test Data	All tests are to be performed through the Availability Screen in the GUI"
NGI UC for Manage Inbound AVS Agreements.docx,"UC1128 NGI UC for Manage Inbound AVS Agreements CRUD Use Case SpecificationVersion Delivery Scheduling InformationApprovalsAuthor: Michael ChaffeeDocument version: 1.3Document Date: 2015-Feb-11Revision History
Contents1.	Brief Description	71.1	Background	71.2	References	71.3	Story Mapping	72.	Actors	83.	Basic Flow of Events	93.1	Basic Flow 1 – GUI Search and view Inbound Agreement	93.1.1	Specific Preconditions	93.1.2	Steps	93.1.3	Specific Post Conditions	93.2	Basic Flow 2 – GUI Create Inbound AVS Agreement	93.2.1	Specific Preconditions	93.2.2	Steps	93.2.3	Specific Post Conditions	103.3	Basic Flow 3 – Update Inbound AVS Agreement	103.3.1	Specific Preconditions	103.3.2	Steps	103.3.3	Specific Post Conditions	103.4	Basic Flow 4 – Delete Inbound AVS Agreement	103.4.1	Specific Preconditions	103.4.2	Steps	103.4.3	Specific Post Conditions	113.5	Basic Flow 5 – Copy Inbound AVS Agreement	113.5.1	Specific Preconditions	113.5.2	Steps	113.5.3	Specific Post Conditions	114.	Alternate Flows	124.1	Alternate Flow 1 – Match single Inbound AVS Agreement	124.1.1	Specific Preconditions	124.1.2	Steps	124.1.3	Specific Post Conditions	125.	Exception Flows	125.1	Exception Flow 1 – Validation Error	125.1.1	Specific Preconditions	125.1.2	Steps	125.1.3	Specific Post Conditions	125.2	Exception Flow 2 – No Records Found on Match	135.2.1	Specific Preconditions	135.2.2	Steps	135.2.3	Specific Post Conditions	136.	Sub Flows	136.1	Sub Flow 1: Create Inbound Agreement	136.1.1	Specific Preconditions	136.1.2	Steps	136.1.3	Specific Post Conditions	136.2	Sub Flow 2: Retrieve Inbound Agreement	146.2.1	Specific Preconditions	146.2.2	Steps	146.2.3	Specific Post Conditions	146.3	Sub Flow 3: Update Inbound Agreement	146.3.1	Specific Preconditions	146.3.2	Steps	146.3.3	Specific Post Conditions	146.4	Sub Flow 4: Delete Inbound Agreement	156.4.1	Specific Preconditions	156.4.2	Steps	156.4.3	Specific Post Conditions	156.5	Sub Flow 5: Extract Inbound Agreements	156.5.1	Specific Preconditions	156.5.2	Steps	156.5.3	Specific Post Conditions	157.	Extension Points	158.	Special Requirements	168.1	Navigation Requirements	168.2	Usability Requirements	169.	Additional Information	1610.	Changes to Reviewed Use Cases	1611.	Future Use Case Considerations	1612.	Assumptions & Issues	1613.	Elaboration	1613.1	Grid Managed Data	1613.2	Paging	1614.	Test Cases	1614.1	AVS 20a Create Inbound Agreement Service	1714.2	AVS 20b Retrieve Inbound Agreement Service	1714.3	AVS 20c Update Inbound Agreement Service	1814.4	AVS 20d Delete Inbound Agreement Service	1814.5	AVS 20e Extract Inbound Agreements Service	1914.6	AVS 20f GUI – Search for Inbound Agreements	1914.7	AVS 20g GUI – Create/Update/Delete	20NGI UC for Manage Inbound AVS AgreementsBrief DescriptionThis use case describes the process to create, retrieve, update and delete Inbound AVS Agreements.BackgroundSITA receive AVS messages from other airlines (OA) on behalf of all SITA subscribers. The SITA administrator must setup AVS agreements for each airline for which AVS messages are expected. An agreement is needed to tell HIAS how to process messages as this is not stated by the message itself. Unlike the AVS outbound agreement there is no need for exception agreements for OA AVS.Control of code share AVS is excluded from the scope of this agreement. AVS is one facet of the code share agreement, which is setup in Horizon Admin (HA). Processing of inbound AVS must address both the Inbound OA AVS agreement and the code share agreement.Messages received from a system without an agreement will result in an error notification. To stop these messages, the SITA admin must create an inbound AVS agreement. The agreement must tell HIAS the form of AVS, for example first close or segment, or must tell HIAS to ignore AVS from this sender (Ignore/No AVS).ReferencesStory MappingThe Use Case breaks into the following stories:ActorsPrimary Actor: 	Subscriber AdministratorSecondary Actor: SITA Central Site Administrator
Basic Flow of EventsBasic Flow 1 – GUI Search and view Inbound AgreementSpecific Preconditions  Actor is successfully logged in.Actor is authorized to extract Inbound AVS Agreement.StepsActor navigates to the Inventory Templates page by selecting inbound AVS agreement from the menu.GUI renders the inbound template search page using Extract Request - BDD (Ref [1]: §2.2). Actor completes the search criteria according to the BDD (Ref [1]: §2.2).Subscriber Administrator selects “Search”GUI creates and submits an extract inbound AVS agreement request using Sub Flow 5 (§6.5).GUI renders a page of inbound agreement template results according to the BDD (Ref [1]: §2.3)Actor selects “Open”GUI creates a new tab and renders the full details of the Inbound Agreement selected according to the BDD (Ref [1]: §2.1).Flow endsSpecific Post ConditionsList of inbound agreements matching the search criteria rendered by the GUI.Basic Flow 2 – GUI Create Inbound AVS AgreementSpecific Preconditions  GUI renders the template search page (Basic Flow 1: §3.1).StepsActor selects “Create New”.GUI renders the Create/View Inbound AVS Agreements page according to the BDD (Ref [1]: §2.1).Actor provides information for Inbound AVS Agreement data elements according to the BDD (Ref [1]: §2.1).Actor selects “Create”.GUI submits a request to create an AVS Agreement using Sub Flow 1 (§6.1).GUI renders a successfully created message to the user.Flow endsSpecific Post ConditionsNew Inbound AVS Agreement createdHistory record createdBasic Flow 3 – Update Inbound AVS AgreementSpecific Preconditions  Actor completed Basic Flow 1 – GUI Search and view Inbound Agreement (§3.1)GUI showing at least one resultStepsActor selects an agreement from the listed agreements.Actor selects “Open”.GUI creates a new tab and renders the Inbound Agreement already extracted and retained from Basic Flow 1 according to the BDD (Ref [1]: §2.1).Actor updates the inbound AVS agreement according to BDD (Ref [1]: §2.1). Actor selects “Update”.GUI prompts Subscriber Administrator to confirm update.Actor selects “Change”GUI submits a request to update the AVS Agreement using Sub Flow 3 (§6.3)GUI renders a successfully created message to the user.Flow endsSpecific Post ConditionsInbound AVS agreement updatedHistory record createdBasic Flow 4 – Delete Inbound AVS AgreementSpecific Preconditions  Actor completed Basic Flow 1 – GUI Search and View Inbound Agreement (§3.1) GUI Presents with results.StepsActor selects agreement from the listed agreements.Actor selects “Delete”.GUI prompts Subscriber Administrator to confirm delete.Subscriber Administrator selects “Delete”.GUI submits request to the AVS Agreements service to delete the agreement using Sub Flow 4 (§6.4).GUI renders a successfully deleted message to the user.GUI removes the deleted agreement from the list rendered in Basic Flow 1, and redisplays the list according to the BDD (Ref [1]: §2.3).Flow endsSpecific Post ConditionsInbound agreement deletedAgreements search page reloads without the deleted agreement. Basic Flow 5 – Copy Inbound AVS AgreementSpecific Preconditions  Actor completed Basic Flow 1 – GUI Search and View Inbound Agreement (§3.1) GUI Presents with results.StepsActor selects agreement from the listed agreementsActor selects “Copy”GUI renders the Create/View Inbound AVS Agreements page according to the BDD (Ref [1]: 2.1/2.2) GUI pre-populates the form with data from the selected agreementFlow continues from 3.2 Basic Flow 2 – GUI Create Inbound AVS Agreement step 3Specific Post ConditionsN/AAlternate FlowsAlternate Flow 1 – Match single Inbound AVS Agreement Specific PreconditionsSystem performed Sub Flow 5: Extract Inbound Agreements in Basic Flow 1 – GUI Search and view Inbound AgreementGUI detects only a single matching agreement.Steps Inbound Agreement Service returns to Step 8 of Basic Flow 1 – GUI Search and view Inbound AgreementSpecific Post ConditionsNoneException FlowsException Flow 1 – Validation ErrorSpecific PreconditionsSystem has performed one of the following steps:Step 1 in Sub Flow 1: Create Inbound AgreementStep 1 in Sub Flow 2: Retrieve Inbound AgreementStep 1 in Sub Flow 3: Update Inbound AgreementStep 1 in Sub Flow 4: Delete Inbound AgreementStep 1 in Sub Flow 5: Extract Inbound AgreementsSteps Agreement Service detects one or more business rule violations.Agreement Service retains the information entered.Agreement Service responds with appropriate error messages.Flow endsSpecific Post ConditionsAgreement Service responded with appropriate error messagesAgreement state remains unchanged.Exception Flow 2 – No Records Found on MatchSpecific PreconditionsSystem has performed the following step:System has performed Basic Flow 1 – GUI Search and view Inbound Agreement (§3.1) and Sub Flow 5: Extract Inbound Agreements (§6.5).No matching records returnedSteps GUI detects no matches for Inbound AVS AgreementGUI responds with a message indicating that agreement was not foundFlow endsSpecific Post ConditionsInbound Agreement Service responded with a message indicating Inbound AVS Agreement not found.Sub FlowsSub Flow 1: Create Inbound Agreement Specific PreconditionsActor has selected [Create] to create an AVS agreement from the search page.StepsThe Agreement Service validates the request according to the NGI BDD for Inbound AVS Agreements.The Agreement Service creates the Inbound AVS Agreement.The inbound AVS agreement is used by the grid when updating OA availability status in order to know, if to process the update and how it should be processed. Persistence of the AVS agreement must be managed by the grid.The Agreement Service propagates the Inbound AVS Agreement change to all instances of the Flight Manager.Refer to Design ConsiderationsThe Agreement Service creates a history record.The Agreement Service returns a successful indication including the document id.The Sub Flow ends.Specific Post ConditionsDocument Created and saved in database.Change propagated to all grid instancesSub Flow 2: Retrieve Inbound AgreementThe retrieve inbound agreement sub flow is used to retrieve a specific document. The “Sub Flow” is not used by the GUI however; the operation is required and used for testing.Specific PreconditionsNoneStepsThe Agreement service validates the request according to the BDD (Ref [1]: §2.1).The Agreement Service uses the document id to retrieve the inbound agreement from storage.The Agreement Service returns the requested document.Sub Flow ends.Specific Post ConditionsNoneSub Flow 3: Update Inbound AgreementSpecific PreconditionsActor requests an update to an existing agreement using Basic Flow 3 – Update Inbound AVS Agreement (§3.3).StepsThe Agreement Service validates the request according to the BDD (Ref [1]: 2.1/2.2).The Agreement Service retrieves the record to be changed and validates the changes. The Agreement Service updates the document version number, last updated by, and last updates time.The Agreement Service stores the change and updates in all local caches.The Agreement Service records a history item.The Agreement Service returns a successful update.Specific Post ConditionsUpdated AVS Inbound Agreement.Sub Flow 4: Delete Inbound AgreementSpecific PreconditionsThe Actor requested to delete an Inbound Agreement using Basic Flow 4 – Delete Inbound AVS Agreement.StepsThe Agreement service validates the request according to the NGI BDD for Inbound AVS Agreements.The Agreement Service deletes all the Inbound AVS agreements from the database and from local caches.When the global agreement for a given carrier x host is deleted, all exception agreements for that carrier are also deleted. The Agreement Service records a history item.The Agreement service returns a successful indication.Specific Post ConditionsNone
Sub Flow 5: Extract Inbound Agreements Specific PreconditionsActor searches for inbound agreement in Basic Flow 1 – GUI Search and View Inbound Agreement (§3.1).StepsThe Agreement Service validates the request according to the BDD (Ref [1]: 2.3).The Agreement service retrieves all Inbound AVS agreements that match the search request.The Agreement Service sorts the records by Airline Code.The Agreement Service returns the inbound AVS agreements.Specific Post ConditionsNoneExtension PointsNoneSpecial RequirementsNavigation RequirementsVoyager Non-Functional Requirements
Usability RequirementsVoyager Non-Functional Requirements
Additional InformationNoneChanges to Reviewed Use CasesNoneFuture Use Case ConsiderationsThe need for history is defined in this use case, but implementation and testing of history is covered by alternate use cases.Assumptions & IssuesNoneElaborationGrid Managed DataThe service implements the grid managed persistence pattern for inventory data. Refer to the HIAS standard service specification. AVS Agreements must be available to all grid instances. Data must be propagated and held locally within the grid. Prior to this story and the concept of templates, Luxoft had already delivered a variation of the AVS Agreement, details of which are in the AVS.03 story. The service and database schema for this already exists.This story:Changes the service schema
i.  drops the concept of exception agreements
ii. adds a numeric agreement 
iii. adds the default levels that an availability response should present for open availabilityThe database needs one small change, namely to relax the constraint on the agreement type to allow a fourth value. A future change will drop the AVS exception table, however at the time of development this table will be retained in case the requirement for exceptions re-surfaces.PagingThe GUI and service must implement the paging according to the HIAS standard service. Test CasesDefinition of Done (DoD) requires that all of the following tests have been created and pass.Note that:Test cases specifically exclude handling of history refer to §11.AVS 20a Create Inbound Agreement ServiceAVS 20b Retrieve Inbound Agreement ServiceThe following tests are required for DoD for the Agreement retrieval service operation. Note that the GUI does not use retrieval, but this is a required service used for testing.	AVS 20c Update Inbound Agreement Service
AVS 20d Delete Inbound Agreement ServiceAVS 20e Extract Inbound Agreements ServiceAVS 20f GUI – Search for Inbound AgreementsAVS 20g GUI – Create/Update/Delete"
NGI UC for Availability Orchestration.docx,"NGI UC for Availability OrchestrationUse Case SpecificationAuthor: Nguyen Van BinhDocument version: 1.3Document Date: 2015-June-15ApprovalsRevision HistoryContents1.	Overview	41.1	Brief Description / Background	41.2	Story Mapping	42.	Actors	42.1	Primary Actors	42.2	Secondary Actors	43.	References	54.	General Preconditions	75.	General Post Conditions	76.	Basic Flow of Events	86.1	Basic Flow 1 – Process Availability Request and Response Orchestration	86.2	Basic Flow 2 – Simulate Availability	167.	Alternate Flows	177.1	Alternate Flow 1 – Determine First Availability	177.2	Alternate Flow 2 –Bypass Cascading Availability	187.3	Alternate Flow 3 – More Availability	198.	Exception Flows	218.1	Exception Flow 1 – Unable to Recognize Availability Request	218.2	Exception Flow 2 – Message Transformation Error	218.3	Exception Flow 3 – Availability Request Validation Error	218.4	Exception Flow 4 – Non-Host Originator Requests for OA Availability	228.5	Exception Flow 5 – Non-Host Originator not Eligible for Interactive Availability Request	228.6	Exception Flow 6 – No Actionable Segment	238.7	Exception Flow 7 – Request Availability Beyond Maximum Sell Date	238.8	Exception Flow 8 – No More Routings	249.	Sub Flows	249.1	Sub Flow 1 – Determine Availability on SITA Hosted OA Segments	249.2	Sub Flow 2 – Generate Routings for Specific Flight Request	259.3	Sub Flow 3 – Determine Segment Note	2710.	Special Requirements	2810.1	Subscriber parameter	2810.2	Message Transformation	2810.3	Partner Agreements	2910.3.1	Internal OA Agreement	2910.3.2	External OA Agreement	2910.3.3	External GDS Agreement	3010.3.4	SITA Marketplace Air	3010.3.5	Interactive and Direct Access Availability and Sell Session Timeout control	3010.4	Document Updates	3011.	Assumptions, Issues & Future Use Case Considerations	3112.	Additional Information	3113.	Business Data Definitions	3214.	BDD Supporting Business Rules	3215.	Use Case Elaboration	3315.1	AVAIL.24e: Setup client side cache of MICT records with Hide RBD and Inhibit Sale rules	3315.1.1	Summary	3315.1.2	Detail	3315.1.3	Acceptance	3415.2	AVAIL.24f – Apply RBD Hide & Inhibit Sale rule during Availability determination	3515.2.1	Summary	3515.2.2	Detail	3515.2.3	Acceptance Tests	3515.2.4	Non Functional Requirements	3715.3	AVAIL.24g – Synchronize Segment Notes	3815.3.1	Summary	3815.3.2	Detail	3815.3.3	Acceptance	4215.4	AVAIL.24h – Apply segment notes to availability response	4515.4.1	Overview	4515.4.2	Detail	4515.4.3	Acceptance Tests	4515.4.4	Non Functional Requirements	4715.5	AVAIL.24b – Apply POO (Point-of-Origin) restrictions to Availability & Sell	4715.5.1	Overview	4715.5.2	Detail	4715.5.3	Acceptance Tests	4815.6	AVAIL.24c – Apply Upline/Downline restrictions to Availability & Sell	5115.6.1	Summary	5115.6.2	Background	5115.6.3	Detail	5315.6.4	Acceptance Tests	53
NGI UC for Availability OrchestrationOverviewBrief Description / BackgroundWhen HIAS receives an availability request, based on the specific information provided in the request such as point of sale, request type, requested routing etc the system invokes the related use case(s) to process and build the availability response.This use case orchestrates the processes pertaining to handling availability requests and responses in HIAS.Story MappingActorsPrimary ActorsBasic Flow 1: Availability EnquirerBasic Flow 2: HIAS Inventory AnalystSecondary ActorsHorizon MessagingS&SSITA Airfare ShopSITA E-CommerceGDS/OAReferencesGeneral PreconditionsThe airline is a Leg/Segment Allocation and Availability (HIAS2) Subscriber or later.Actor is authorized to perform the functionality in this use case General Post ConditionsNone
Basic Flow of EventsBasic Flow 1 – Process Availability Request and Response OrchestrationBasic Flow 2 – Simulate AvailabilityAlternate FlowsAlternate Flow 1 – Determine First AvailabilityThis Flow describes the processing for First Availability requests from S&S or GDS/OA, or for a determination of first availability upon a unable Type-B sell transaction that is requested by S&S.Alternate Flow 2 –Bypass Cascading AvailabilityHorizon system must provide cascading availability to GDS/OA. Responsibility for cascading requests to GDS/OA will be determined. In any cases, there should not be duplicate processes/services in Horizon that transforms host requests into and send outbound EDIFACT PAOREQ messages. Alternate Flow 3 – More AvailabilityThis Flow describes the processing for a More Availability request Exception FlowsException Flow 1 – Unable to Recognize Availability RequestException Flow 2 – Message Transformation ErrorException Flow 3 – Availability Request Validation ErrorException Flow 4 – Non-Host Originator Requests for OA AvailabilityException Flow 5 – Non-Host Originator not Eligible for Interactive Availability RequestException Flow 6 – No Actionable SegmentException Flow 7 – Request Availability Beyond Maximum Sell DateException Flow 8 – No More RoutingsSub FlowsSub Flow 1 – Determine Availability on SITA Hosted OA SegmentsSub Flow 2 – Generate Routings for Specific Flight RequestSub Flow 3 – Determine Segment NoteNote: this Sub Flow is carried over from the old version of the NGI UC for Determine Allocation Availability dated back in 2012. For more elaborated information for this Flow, please refer to the mentioned UC version.Special RequirementsSubscriber parameterMax_Routings_to_Return: Parameter that defines the maximum number of routings to return in each availability response.First_Availability_Window_Start and First_Availability_Window_End : Parameters that define date range to search for first availability, which are the number of days before and the number of days after the date specified in a First Availability request, or today's date when the request does not specify any date.First_Availability_TypeB_Sell_Window_Start and First_Availability_ TypeB_Sell_Window_End : Parameters that define date range to search for first availability when a type-B sell is failed due to no seats available, which are the number of days before and the number of days after the requested date.Note: Other subscriber parameters for availability processing and generate routings are defined in the corresponding Use Case(s).Message TransformationHorizon must provide the transformation services to transform the below type of availability requests into HIAS canonical form and to transform HIAS responses into the message formats corresponding to the requests received:EDIFACT PAOREQ (request) and PAORES (response) from GDS and OA. This is to support inbound interactive availability request.HIAS canonical form for availability request into EDIFACT PAOREQ (request from HIAS to external system) and PAORES (response from GDS and OA) into HIAS canonical form for availability response. This is to support outbound interactive availability request, for example in SITA Marketplace Air use.Direct Access Terminal Emulation inbound request and outbound response. This is to support GDS/OA direct access request sent into Horizon.Direct Access Terminal Emulation outbound request and inbound response. This is to support subscriber's direct access requests sent out to OA's. Note: The need for Outbound Direct Access Terminal Emulation will be determined based on specific customer's requirement on a particular OA that cannot support Direct Access Interactive.Inbound OTA Schemas availability requests into HIAS canonical form and vice versa.For other availability request formats (proprietary), it is assumed that the application or system that relies on the proprietary format shall be responsible for the transformation.Partner AgreementsInternal OA AgreementAgreement between HIAS Hosted carriers must be in place in order to define the below availability controlsThe Availability Type: Inbound or Outbound or BothAVS or AVN or Interactive Scope for Interactive Availability Type: (Allowed or Disallowed; Default or On Request only)Award AvailabilityCode share flights onlyAll published flights or selected flights or flight /date rangeExternal OA AgreementAgreement between the Subscriber and non-SITA OA must be in place in order to define the below availability controlsThe Availability Type: Inbound or Outbound or BothAVS or AVN or Interactive Direct AccessScope for Interactive Availability Type: (Allowed or Disallowed; Default or On Request only)Award AvailabilityCode share flights onlyAll published flights or selected flights or flight /date rangeAllowable Booking Offices for Outbound Interactive Availability (Partner Access): The booking offices that are allowed to get Partner Access cascading availability, for each of the Interactive Availability types (Award Availability, Code Share, Published)External GDS AgreementThe Availability Type: (Inbound only)AVS or AVN or Interactive (Allowed or Disallowed)Direct Access (Allowed or Disallowed)Scope for Interactive Availability Type: Award Availability: IATA/In-house POS's that are allowed to request Award Availability on host flightsAll published flights or selected flights or flight /date rangeSITA Marketplace AirScope for Interactive Availability Type: Service allowed or disallowedSelected OA's or All OA's to cascade availabilitySelected OA flights or flight range and/or date range (??)Allowable Booking Offices for SITA Marketplace Air: The booking offices that are allowed to get SITA Marketplace Air cascading availability.Interactive and Direct Access Availability and Sell Session Timeout controlThe above Agreements must provide the capability to control session timeout for both inbound and outbound requests.Subscriber parameters may be used to define the default interactive availability and/or sell session timeout.Document UpdatesSection 3 – Reference lists all documents related to this Use Case. Please refer to the ""Notes"" column that outlines the requirements to update each of the related documents.Assumptions, Issues & Future Use Case ConsiderationsAssumptionsSITA will continue to support Direct Access Terminal Emulation in Horizon.Outbound interactive availability messaging shall be handled by a common service that will be used by both HIAS and S&S.S&S always forwards the POS information as received from other systems to HIAS in availability requests.S&S always forwards journey data as received from other systems or as exists in CJ to HIAS in availability requests.IssuesAs time of writing, it is not known about which domain will generate direct connect availability requests such as outbound direct access, SITA Marketplace Air Bypass etc to other systems. There is a question about whether S&S should send request to HIAS for cases that do not involve HIAS actions such as direct connect availability to Alliance or Partner Access or SMA Bypass.Does it required for HIAS to support Calendar Availability OR will Airfare Shop handle it?Future ConsiderationsEnhanced Availability Data Messages (AIRIMP 4.9)Additional InformationNotes from Cliff Here is how I see it to work the best.S&S makes AV call to HIASHIAS creates display and within display one airline is RSS and other Partner AccessHIAS cascades the request to 1G (RSS) and another to Partner AccessHIAS receive a response from both HIAS returns AV display to S&S with indicators of RSS and Partner Access on each availability line.S&S makes a sale on RSS availability and ITAREQ goes direct to 1G(RSS)  This starts the sessionS&S request a seat map (SMPREQ) on previously sold RSS airline.  SMPREQ goes directly to 1G.  This usually is a one off and will not be on session established by ITAREQ.S&S closes PNR and HWPREQ goes directly to 1G.  This closes the sessionThis does not take into account the bypass input to go directly to 1G(RSS).   I do not think HIAS should be a middle man in this request and the city pair request (PAOREQ MSG 44) should go direct to 1G (RSS).Sample PAORES and PAOREQ messageBusiness Data DefinitionsRef [9]BDD Supporting Business RulesNone
Use Case ElaborationAVAIL.24e: Setup client side cache of MICT records with Hide RBD and Inhibit Sale rulesSummaryThis story describes the need to setup a client side cache (local view in Weblogic server nodes) of MICT records with Hide RBD and/or Inhibit sale rules from MICT rules cache available in the GigaSpaces data grid.DetailThis task can be done concurrently with AVAIL.24f, which applies Hide RBD and/or Inhibit sale rules to the availability response returned by the Inventory enquirer.To enable Inventory Enquirer service to rapidly access the Hide RBD and Inhibit sale rules for applying the rules, a local view (cache) of MICT records with Hide RBD and Inhibit sale rules needs to be set up in the WebLogic server nodes. The local view must consist of MICT records that match all the following filter conditions The MICT record's Action element contains either RBDInhibitSaleAction element or RBDHideAction element as in the XPaths below. ../MICTRecord/Action/RBDInhibitSaleAction../MICTRecord/Action/RBDHideActionThe MICT record should be in 'Active' state../MICTRecord/Status is 'Active'The MICT record's document status is 'Active' ../{DocumentHeader}/AdministrativeRecord/DocumentStatusWhere an MICT record matches all the above filter criteria, the whole MICT record is loaded in the local view.As the MICT records with Hide RBD and/or Inhibit sale rules are available in the local view of the WebLogic node, retrieval of these MICT rules from the local view should not take more than 1 millisecond.In an effort to monitor the adding and updating of MICT records that are loaded in the local view, explicit logging is required Whenever an MICT record is updated in the view. Whenever a new MICT record is added to the local view after startup.If there is a provision to use call-back methods or triggers, these mechanisms must be used for the logging activity. 
AcceptanceDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. AVAIL.24f – Apply RBD Hide & Inhibit Sale rule during Availability determinationSummaryThis story adds the capability to apply availability and business sell rules while returning availability response. Prior to taking up this task, ensure development of INV.04pq – MICT rule for RBD Hide and Inhibit from Sale is developed. Caching of availability and sell business rules (AVAIL.24e) can done together with this task.Note: This UC is not final and therefore recommend offshore do not refer to any of its flows, while delivering this task. DetailThe rules apply only on host segments. Following MICT rules are applied:Hide RBDInhibit SaleAvailability & sell business rules are maintained in operational Weblogic.  Availability information is maintained in availability space within the grid. The rules could be applicable to the segment for which availability has been sought or to the POS (request originator). After fetching the availability information, system amends the response structure depending on the rules as below: When Business Rule for Hide RBD applies, the corresponding RBDs/Cabins are not displayed on the flight/routing When Business Rule for Inhibit Sell applies, system assigns “C"" status (Closed – Request Closed) to such RBDs.The rules need to be checked irrespective of whether the request is for a booking or group or waitlist.To deliver this task, existing process of constructing availability response for simulate availability is adequate. Please note the Availability calculation in not affected by this.System prevents inventory adjustment (Sell/Cancel) on RBDs that meet the above criteria for their corresponding POS (which will be addressed in INV.25def)Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. Demo has to be done through the GUI.Test DataFollowing schedules/ICRs in FY configuration exists in the system 	Ensure connection exists between LHR-FRA + FRA-DEL flightFollowing MICTs for Hide RBD / Inhibit Sell exist. Note: If both Hide and Inhibit rule exists for same RBD for same period and matching conditions, then Hide rule takes precedence, since it also prevents sale on the RBD.Availability Response When No rules exist (normal availability)When rules #1, #2 & #3 applyT9 Q9 means that RBD is not visibleWhen all rules apply (incl. #4)Note: F9 P9 is not visible for all POS. But T, Q, L & V is not visible only for Ireland POSAnalysisNon Functional RequirementsThe impact on availability performance should be less than 1 ms per segment if there are applicable availability and sell business rules. 
AVAIL.24g – Synchronize Segment NotesSummarySegment Note is a subscriber-specific free text which can be included into availability or sell response for segments of host marketed flights. It can provide any kind of extra information for the recipient, for example about codeshare flight, traffic restrictions, group booking restrictions, wet/dry lease, etc. Today segment notes are not widely used in the mainframe.Segment notes will be managed in Sales & Services, and they will also apply segment notes to sell responses.  However HIAS needs to apply them to availability response and will fetch them from SnS. The cache will be kept up to date using a synchronization framework based on receiving a trigger from the Notification Broker.SnS user will define scope for application of a segment note by specifying range of flight numbers and/or travel dates and/or arrival/departure city-pairs. For detailed description of fields please refer to S&S “UC for Manage Flight Segment notes” [1].This story uses the following terminology:Note: This task has nothing to do with the flows mentioned in this UC and therefore we recommend offshore do not refer to any of its flows, while delivering this task. DetailSynchronization of Segment Notes with SnSHIAS will maintain distributed Coherence SegmentNotesCache in Operational Weblogic cluster to be used by InventoryEnquirer when applying notes to availability (which is a subject of separate story AVAIL.24h). Segment notes are subscriber-specific; however one cache will be used for all subscribers. The cache will be kept up to date using a synchronization framework based on receiving a trigger from the Notification Broker. HIAS receives these notifications by subscribing to the Notification Broker’s three topics:IAS/SEGNOTECREATEEVENTIAS/SEGNOTEUPDEVENTIAS/SEGNOTEDELEVENTSince generation of Availability response is a performance-critical operation, read-through must not be used. Instead the cache should work in asynchronous refresh mode with refresh being triggered by a dedicated task in Scheduled Jobs Manager (SJM), which in turn will trigger OperationalTrigger operation of HIAS FlightInventoryService with Topic=SegmentNotes and Operation=UpdateCache. Cache will not expire.When the FlightInventoryService receives a request to update the SegmentNotesCache, it should invoke the FindFlightSegmentNote operation of the Manage SnS service (for FlightSegmentNoteManager) to retrieve the segment notes. There is a concept of “Display Options” in S&S segment notes which denotes the type of transaction to which a particular segment note should be applied.  HIAS will only apply segment notes with display option for “AVAD-Availability Display” or “PAOR-PAORES Response”, therefore only notes with such display options need to be extracted from SnS. To find the segment notes with that particular option set the FindFlightSegmentNote should be used.HIAS will request SnS to provide notes which have been changed, added or deleted since the last update. Only the data which got changed is required to be refreshed in cache.Populating Cache on System StartupGiven scarcity of notes, Active Scheduled Segments Cache in Operational WLS must be populated prior to populating SegmentNotesCache during the system startup. This is to minimise the number of requests for matching a note with a scheduled segment – see below. As part of startup each Weblogic instance must attach to the cache.Pre-caching Segment Notes It is anticipated that subscriber-managed segment notes will be sparse across flights. In order to take advantage of this assumption and minimise impact on availability performance, the system should not check each and every operational segment (ICR segment flying on a specific date) for applicability of a segment note when responding to availability request.Instead, a new SegmentNoteInd indicator needs to be added to ActiveScheduledSegments Coherence cache within operational WLS cluster. This indicator should be set to True for a host scheduled segment if there is at least one flight date matching at least one segment note from SegmentNotesCache. This indicator must only exist in cache and must not be persisted in Schedules DB.The following paragraph is for information only and outlines application of segment notes which will be developed as a separate story AVAIL.24h.When returning travel options to InventoryEnquirer, FlightConnectionEnquirer will indicate those built from scheduled segments with SegmentNoteInd. In turn, InventoryEnquirer prior to returning availability for such travel options (and only for them!) will invoke internal lookup interface of SegmentNotesCache for notes matching the operational segments of the returned travel options. This way the impact on availability performance is kept to minimum.Please note that memory footprint within Weblogic must be kept to a minimum, hence SegmentNoteInd has to be Boolean. In theory HIAS could store IDs of all notes applicable to scheduled segment and thus reduce lookup scope when applying notes to operational segments in availability response. However, it is deemed that given the scarcity of notes, the memory considerations will outweigh this potential benefit.Sequence DiagramThe upper part of the diagram below presents the high level picture of AVAIL.24g story and the lower part illustrates AVAIL.24h.Updating ScheduledSegmentsCache during Synchronization of Segment NotesDuring propagation of new Active host Schedule Segments into Operational WLS cache, the system should search within SegmentNotesCache for matching segment notes and set SegmentNoteInd if there is at least one match. For matching rules please refer to “Matching Notes with Segments” section below. Given the scarcity of notes, during population of SegmentNotesCache on the system startup HIAS should, on the contrary, search for cached segments matching every cached note and mark those matching at least one note with SegmentNoteInd. This is why the cache of notes should be populated after the cache of segments in the startup sequence. Prior to initial population of Segment Notes cache all the existing SegmentNoteInd indicators should be cleared.Likewise, during synchronization of segment notes HIAS  should identify which segment notes have been added, modified (note text changes are not considered for the purposes of this comparison!) or deleted and then revise cached schedule segments in accordance with the diagram below.Matching Notes with SegmentsALL of the following conditions must be met in order for a note to match a segment or vice versa (blank elements of a note’s scope should be considered as applicable to all segments). The same logic is used for operational and scheduled segments.Marketing airline code of the segment matches the Note’s airline code.Schedule Period of the segment intersects with the Note’s date range, and there is at least one operational departure within the intersection (one operational arrival – in case only Offpoint Station is specified within City/Airport).If finding notes for operational segments during application to availability, actual departure/arrival date of a segment should be matched against the Note’s date range.For example, if a flight segment operates on Mondays, Wednesdays and Fridays between 1st and 30th of June 2015 departing from JFK and arriving to LHR the next day:JFK(01.06)-LHR(02.06)
JFK(03.06)-LHR(04.06)
JFK(05.06)-LHR(06.06)
…The following notes would be applicable:
Travel Date 2-4, Boarding at JFK, Offpoint LHR (because there is departure on 3rd)
Travel Date 1, Boarding at JFK, Offpoint not specified (because there is departure on 1st)
Travel Date 1-30, Arrival into LHR (because there are numerous arrivals within this range)

And the following note would not be applicable:
Travel Date 3, Arrival into LHR (because there are no arrivals on 3rd)Note’s Flight Number (whether it is a range or a single number) matches the segment’s flight number (matching of flight number suffixes may be a subject of future story)Note’s Boarding City/Airport matches departure station of the segment’s first leg (Locations Manager data should be used to match cities with airports – see story ARCH.19)Note’s Offpoint City/Airport matches arrival station of the segment’s last leg.This logic should be used in both directions: for finding segments matching a note as well as for finding notes matching a segment.AssumptionsSnS will apply segment notes to sell responses.SnS will be able to return only segment notes that have changed since the last update in order to minimise payload. (Including notes that have been deleted, which can be flagged as inactive.) Otherwise HIAS would have to determine the delta between the existing cache and the entire set of notes returned by SnS.Auto-generated (“canned”) segment notes will not be applied by HIAS on the grounds that availability response already contains the required information (codeshare operating airline and traffic restriction). Transformation of these data elements into human-readable text presentation (IFT) will be addressed in future stories.AcceptanceDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. Integration with actual SnS service is part of definition of done, however to demonstrate some of the acceptance tests below mock service can be used. Test data in tables below or similar should be used for acceptance testing.Table 1: Segment Notes initially existing in SnSTable 2: Schedules in HIAS DB (active status and weekly frequency is assumed for all):Note: MCT should allow connecting S2 to S3 and S1 to S5.AVAIL.24h – Apply segment notes to availability responseOverviewThis story describes application of cached segment notes to the availability response covering Sub flow 3 of this use case. Please refer to AVAIL.24g “Synchronize segment notes” story description for general description of segment notes and their caching. AVAIL.24g story will be developed prior to AVAIL.24h.DetailFinding Segment NotesWhen returning travel options to InventoryEnquirer, FlightConnectionEnquirer will indicate scheduled segments that can potentially have a segment note applied by setting the SegmentNoteInd. In turn, InventoryEnquirer prior to returning availability for such travel options should invoke internal lookup interface of SegmentNotesCache for all notes matching the operational segments of the returned travel options. For matching rules please refer to “Matching Notes with Segments” section of AVAIL.24g story. IAS is concerned with segment notes of two usage options: “Availability Display” (for host availability requests) and “PAORES Response” (for all other availability requests). This should be done independently for every segment and O&D in the response (as the response may contain segment marketed by different carriers).Returning Segment NotesInventoryEnquirer should include text of matching segment notes into availability response for corresponding segments within the following element:tns:ShowFlightAvailability/tns:OriginDestination/inv:ODOptions/ inv:ODOption/inv:Segment/inv:SegmentNoteMessaging will transform this XML element into IFT (Interactive Free Text) element of EDIFACT PAORES (subject of future stories).More than one segment note can be applicable to a segment. The schema allows the maximum of 10 segment notes to be returned, which should be sufficient. However if more than 10 notes are applicable, then first 10 should be returned. Currently there are no requirements for ordering them within availability response.Skipping Segment NotesThe requestor will be able to ask not to include segment notes into availability response. If the following element on the request is set to True, then InventoryEnquirer should not attempt to find matching segment notes:
tns:SearchForFlightAvailability/tns:SearchInfo/inv:OmitSegmentNotesInd (for City Pair availability)tns:SearchForFlightSpecificAvailability/tns:SearchInfo/inv:OmitSegmentNotesInd (for Flight-specific)AssumptionsMore than one segment note can be applicable to an operational segment.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. See acceptance tests of story AVAIL.24g for test data referenced below.Non Functional RequirementsThe impact on availability performance should be less than 1 ms per segment if there are up to 10 applicable segment notes, There will be no recordable impact to response time for segments without SegmentNoteInd.There will be no recordable impact to response time for requests with OmitSegmentNotesInd.AVAIL.24b – Apply POO (Point-of-Origin) restrictions to Availability & SellOverviewHIAS currently returns availability response based on the POS. However point-of-origin (POO) restrictions are not applied to the responses. This task enables applying POO restriction to availability and inventory adjustment responses after evaluating the entire journey data that comes in the request. Point of origin refers to the first departure station of a passenger’s journey (itinerary), irrespective of which airline they are travelling. DetailWhen HIAS receives an availability request from internal or external source, the POS data is included in the request (SearchForFlightAvailability/ POS or SearchForFlightSpecificAvailability/ POS). The POO information has to be inferred from the journey data (provided in BookedSegments). It is the departure airport of the first segment in the itinerary. If no booked segment data is given then origin station of request is considered as the POO (OriginDestinationList/ OriginCode). Again first origin code must be taken as POO when multiple OriginDestinationList exists in request. It is assumed that the request is always according to order of itinerary.For Sell requests, the POS & POO information are provided in the AdjustInventory request (AdjustInventory/POS, AdjustInventory/BookedSegments/Segment/DepartureAirport &  AdjustInventory/Segments/ Segment/ DepartureAirport). To determine POO, same logic as above applies.POO restrictions are specified in the POS template (POSTemplate/POSItems/POSItem/POOLocation). Every POS template is assigned to a Booking Limit bucket.System must determine the POO of the request, and from that determine the POS/POO Template Groups that apply to the request/requestor and check whether any restrictions apply to it. If applicable then availability as per the corresponding booking limit bucket is returned in the response. If no restrictions apply then normal availability is returned. If POO restrictions apply on multiple booking limit buckets, then the most restricted availability is returned.Likewise for Sell requests, depending on the POO (POS Template Group associated with the request) restrictions inventory adjustment in corresponding booking limit bucket takes place.To deliver this task, existing process of constructing availability response for simulate availability is adequate. Booking limit sell functionality already exists and is addressed in INV.66f1 and INV.66a2.For all request - booking or group or waitlist, the restrictions have to be checked and applied.	POO_Routing Subscriber ParameterA new subscriber parameter, POO_Routing with values ‘Online’ & ‘Trip’ is introduced. The parameter is intended to identify if the Trip O&D (with OA segments) or the On-Line O&D (contiguous segments that is marketed by the host) is to be checked against the type value when determining if the booking limit applies.  AssumptionsWe assume booked segments will be included in the internal and external request that HIAS receives.Only valid connections will be received for processing availability and system will ignore/reject invalid connections prior to seeking availability.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. Demo has to be done through the GUI.Test DataFollowing schedules/ICRs in FY configuration exists in the system * BA schedule is for representation purpose only and need not actually exist in HIAS. Following POS for POO restrictions exist to ICRs. *values for GAU, WAU & MinAU assumed to be zero (0)	Note: Assume passenger routing is DUB-LHR-DEL-KUL, then ‘Trip’ check will include OA segments. Hence POO for ‘Trip’ is DUB.‘Online’ check is for Host segments only (incl.marketed). Hence POO for ‘Online’ is LHR. Availability tests	* Other RBDs are displayed with 9 seats (since no restrictions apply on them)Inventory Adjustment (Sell) tests
Non Functional RequirementsThe impact on availability performance should be less than 1 ms per segment. AVAIL.24c – Apply Upline/Downline restrictions to Availability & SellSummaryUpline / Downline restrictions are limitations that apply to a segment based on the stations (legs) it comprises. They are defined in the Booking Limit template. This task enables applying upline / downline restrictions to availability and inventory adjustment request after evaluating the journey data. BackgroundUpline / downline restrictions are explained through the route network diagrams below.Upline						Downline    On FRA-DEL flight, limited seats are offered to passengers who connect from upline point JFK and likewise limited seats are offered to passengers who travel to downline point HKG. Rule: Departure station can be an upline point, but not a downline point (eg: LHR, CDG, JFK, ATL & FRA are upline points for FRA-DEL). Arrival station can be a downline point, but not an upline point (eg: HKG, KUL, SIN, SYD & DEL are downline points for FRA-DEL). Assigning booking limits to flights as per above rule is part of training issue.Note: These restrictions could apply to all requests (ie every POS) or can apply to specific POS groups, if defined in the booking limit template.Subscriber ParameterThis story introduces a new subscriber parameter ‘UpLine_DownLine_Station’ with values ‘Flight’ & ‘Routing’. For ‘Flight’, request is compared to stations in the segment (including legs that make up the segment) and for ‘Routing’ it is compared to stations in any segment in the routings (entire journey).  How upline / downline restrictions apply to availability / sell request is illustrated in the below example. Assume following schedules exist for an airline as per above routing*code share flightsAnd the booking limit templates that exist are below:Restrictions will apply only on the following Availability and Sell city-pair request.DetailJourney data is included in the availability and sell request (provided in Segments or BookedSegments or OriginDestinationList) that HIAS receives. System must determine the origin in upline routing and/or destination in downline routing from the request data and check whether any restrictions apply to it (tns:ShowBookingLimit/tns:BookingLimitTemplate/ inv:BookingLimitItems/ inv:BookingLimitItem/inv:UplineCondition or DownLineCondition) . If applicable then availability as per the corresponding booking limit bucket is returned in the response. If no restrictions apply then normal availability is returned. In case restrictions apply on multiple booking limit buckets, then the most restricted availability is returned.Likewise for Sell requests, depending on the restrictions inventory adjustment in corresponding booking limit bucket takes place.To deliver this task, existing process of constructing availability response for simulate availability is adequate. Booking limit sell functionality already exists (AVAIL.24 & AVAIL.24d) and is further addressed in INV.66f1 and INV.66a2.For all request - booking or group or waitlist, the restrictions need to be checked and applied.Acceptance TestsDefinition of done requires that all test scenarios are satisfied; furthermore it is expected that the development team will identify additional scenarios to add to the test pack. Demo has to be done through the GUI.Test data provided in section (§15.6.2.1) must be used. POS template as below exists.Availability tests	*Other RBDs are displayed with 9 seats (since no restrictions apply on them)Inventory Adjustment (Sell) testsNon Functional RequirementsThe impact on availability performance should be less than 1 ms per segment. "
